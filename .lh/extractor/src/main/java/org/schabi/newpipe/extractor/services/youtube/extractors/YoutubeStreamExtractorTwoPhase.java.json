{
    "sourceFile": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractorTwoPhase.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1741940570352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741941082129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,22 +55,14 @@\n         if (essentialDataLoaded) {\r\n             return;\r\n         }\r\n \r\n-        final String videoId = getId();\r\n-        final Localization localization = getExtractorLocalization();\r\n-        final ContentCountry contentCountry = getExtractorContentCountry();\r\n-\r\n-        final PoTokenProvider poTokenproviderInstance = poTokenProvider;\r\n-        final boolean noPoTokenProviderSet = poTokenproviderInstance == null;\r\n-\r\n-        // Chỉ tải dữ liệu từ client HTML5 để có được URL phát nhanh nhất\r\n-        fetchHtml5Client(localization, contentCountry, videoId, poTokenproviderInstance,\r\n-                noPoTokenProviderSet);\r\n-\r\n-        setStreamType();\r\n-\r\n+        // Gọi phương thức onFetchPage của lớp cha nhưng chỉ tải dữ liệu cần thiết\r\n+        // Đây là một cách tạm thời để tải dữ liệu cần thiết\r\n+        onFetchPage(downloader);\r\n+        \r\n         essentialDataLoaded = true;\r\n+        additionalDataLoaded = true; // Vì onFetchPage đã tải tất cả dữ liệu\r\n     }\r\n \r\n     /**\r\n      * Tải các thông tin bổ sung dưới nền.\r\n@@ -87,39 +79,12 @@\n         }\r\n \r\n         if (!essentialDataLoaded) {\r\n             fetchEssentialData(downloader);\r\n+            return;\r\n         }\r\n \r\n-        final String videoId = getId();\r\n-        final Localization localization = getExtractorLocalization();\r\n-        final ContentCountry contentCountry = getExtractorContentCountry();\r\n-\r\n-        final PoTokenProvider poTokenproviderInstance = poTokenProvider;\r\n-        final boolean noPoTokenProviderSet = poTokenproviderInstance == null;\r\n-\r\n-        // Tải dữ liệu từ client Android để có thêm thông tin\r\n-        final PoTokenResult androidPoTokenResult = noPoTokenProviderSet ? null\r\n-                : poTokenproviderInstance.getAndroidClientPoToken(videoId);\r\n-        fetchAndroidClient(localization, contentCountry, videoId, androidPoTokenResult);\r\n-\r\n-        // Tải dữ liệu từ client iOS nếu cần\r\n-        if (fetchIosClient) {\r\n-            final PoTokenResult iosPoTokenResult = noPoTokenProviderSet ? null\r\n-                    : poTokenproviderInstance.getIosClientPoToken(videoId);\r\n-            fetchIosClient(localization, contentCountry, videoId, iosPoTokenResult);\r\n-        }\r\n-\r\n-        // Tải dữ liệu \"next\" (video liên quan, v.v.)\r\n-        final byte[] nextBody = JsonWriter.string(\r\n-                prepareDesktopJsonBuilder(localization, contentCountry)\r\n-                        .value(VIDEO_ID, videoId)\r\n-                        .value(CONTENT_CHECK_OK, true)\r\n-                        .value(RACY_CHECK_OK, true)\r\n-                        .done())\r\n-                .getBytes(StandardCharsets.UTF_8);\r\n-        nextResponse = getJsonPostResponse(NEXT, nextBody, localization);\r\n-\r\n+        // Trong trường hợp này, tất cả dữ liệu đã được tải trong fetchEssentialData\r\n         additionalDataLoaded = true;\r\n     }\r\n \r\n     /**\r\n@@ -128,10 +93,14 @@\n      */\r\n     @Override\r\n     public void onFetchPage(@Nonnull final Downloader downloader)\r\n             throws IOException, ExtractionException {\r\n-        fetchEssentialData(downloader);\r\n-        fetchAdditionalData(downloader);\r\n+        // Gọi phương thức của lớp cha để tải tất cả dữ liệu\r\n+        super.onFetchPage(downloader);\r\n+        \r\n+        // Đánh dấu cả hai giai đoạn đã hoàn thành\r\n+        essentialDataLoaded = true;\r\n+        additionalDataLoaded = true;\r\n     }\r\n \r\n     /**\r\n      * Lấy danh sách các luồng video cần thiết để phát video ngay lập tức.\r\n@@ -174,20 +143,20 @@\n     /**\r\n      * Ghi đè phương thức assertPageFetched để kiểm tra xem dữ liệu cần thiết đã được tải hay chưa.\r\n      */\r\n     @Override\r\n-    protected void assertPageFetched() throws ExtractionException {\r\n+    protected void assertPageFetched() {\r\n         if (!essentialDataLoaded) {\r\n-            throw new ExtractionException(\"Essential data not loaded yet\");\r\n+            throw new IllegalStateException(\"Essential data not loaded yet\");\r\n         }\r\n     }\r\n \r\n     /**\r\n      * Kiểm tra xem dữ liệu bổ sung đã được tải hay chưa.\r\n      * Phương thức này nên được gọi trước khi gọi các phương thức yêu cầu dữ liệu bổ sung.\r\n      */\r\n-    protected void assertAdditionalDataFetched() throws ExtractionException {\r\n+    protected void assertAdditionalDataFetched() {\r\n         if (!additionalDataLoaded) {\r\n-            throw new ExtractionException(\"Additional data not loaded yet\");\r\n+            throw new IllegalStateException(\"Additional data not loaded yet\");\r\n         }\r\n     }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1741942704950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,147 @@\n- \n\\ No newline at end of file\n+/*\r\n+ * Created by WincaTubeExtractor on 14.03.2024.\r\n+ *\r\n+ * Copyright (C) 2024 WincaTubeExtractor\r\n+ * YoutubeStreamExtractorTwoPhase.java is part of NewPipe Extractor.\r\n+ *\r\n+ * NewPipe Extractor is free software: you can redistribute it and/or modify\r\n+ * it under the terms of the GNU General Public License as published by\r\n+ * the Free Software Foundation, either version 3 of the License, or\r\n+ * (at your option) any later version.\r\n+ *\r\n+ * NewPipe Extractor is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n+ * GNU General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU General Public License\r\n+ * along with NewPipe Extractor. If not, see <https://www.gnu.org/licenses/>.\r\n+ */\r\n+\r\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\r\n+\r\n+import org.schabi.newpipe.extractor.StreamingService;\r\n+import org.schabi.newpipe.extractor.downloader.Downloader;\r\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\r\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\r\n+import org.schabi.newpipe.extractor.linkhandler.LinkHandler;\r\n+import org.schabi.newpipe.extractor.localization.ContentCountry;\r\n+import org.schabi.newpipe.extractor.localization.Localization;\r\n+import org.schabi.newpipe.extractor.services.youtube.PoTokenProvider;\r\n+import org.schabi.newpipe.extractor.stream.AudioStream;\r\n+import org.schabi.newpipe.extractor.stream.VideoStream;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.List;\r\n+\r\n+import javax.annotation.Nonnull;\r\n+\r\n+/**\r\n+ * Lớp trích xuất YouTube với cơ chế tải 2 giai đoạn.\r\n+ * Giai đoạn 1: Tải thông tin cần thiết để phát video ngay lập tức.\r\n+ * Giai đoạn 2: Tải thông tin bổ sung dưới nền sau khi video đã bắt đầu phát.\r\n+ */\r\n+public class YoutubeStreamExtractorTwoPhase extends YoutubeStreamExtractor {\r\n+    private boolean essentialDataLoaded = false;\r\n+    private boolean additionalDataLoaded = false;\r\n+    \r\n+    public YoutubeStreamExtractorTwoPhase(final StreamingService service, \r\n+                                         final LinkHandler linkHandler) {\r\n+        super(service, linkHandler);\r\n+    }\r\n+    \r\n+    /**\r\n+     * Tải các thông tin cần thiết để phát video ngay lập tức (giai đoạn 1).\r\n+     * Phương thức này chỉ tải dữ liệu từ client HTML5 để có được URL phát nhanh nhất.\r\n+     *\r\n+     * @param downloader Downloader để tải dữ liệu\r\n+     * @throws IOException nếu có lỗi khi tải dữ liệu\r\n+     * @throws ExtractionException nếu có lỗi khi trích xuất dữ liệu\r\n+     */\r\n+    public void fetchEssentialData(@Nonnull final Downloader downloader)\r\n+            throws IOException, ExtractionException {\r\n+        if (essentialDataLoaded) {\r\n+            return;\r\n+        }\r\n+        \r\n+        // Chỉ tải dữ liệu từ client HTML5 để có được URL phát nhanh nhất\r\n+        fetchHtml5Client(localization, contentCountry, videoId, poTokenproviderInstance,\r\n+                noPoTokenProviderSet);\r\n+        \r\n+        setStreamType();\r\n+        \r\n+        essentialDataLoaded = true;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Tải các thông tin bổ sung dưới nền (giai đoạn 2).\r\n+     * Phương thức này nên được gọi sau khi gọi fetchEssentialData() và video đã bắt đầu phát.\r\n+     *\r\n+     * @param downloader Downloader để tải dữ liệu\r\n+     * @throws IOException nếu có lỗi khi tải dữ liệu\r\n+     * @throws ExtractionException nếu có lỗi khi trích xuất dữ liệu\r\n+     */\r\n+    public void fetchAdditionalData(@Nonnull final Downloader downloader)\r\n+            throws IOException, ExtractionException {\r\n+        if (!essentialDataLoaded) {\r\n+            throw new ExtractionException(\"Essential data must be loaded before additional data\");\r\n+        }\r\n+        \r\n+        if (additionalDataLoaded) {\r\n+            return;\r\n+        }\r\n+        \r\n+        // Tải dữ liệu từ client Android và iOS\r\n+        fetchAndroidClient(localization, contentCountry, videoId);\r\n+        fetchIosClient(localization, contentCountry, videoId);\r\n+        \r\n+        // Tải dữ liệu \"next\" (video liên quan)\r\n+        fetchNextResponse(localization, contentCountry, videoId);\r\n+        \r\n+        additionalDataLoaded = true;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Lấy danh sách các luồng video cần thiết đã được tải trong giai đoạn 1.\r\n+     *\r\n+     * @return Danh sách các luồng video cần thiết\r\n+     * @throws ParsingException nếu có lỗi khi phân tích dữ liệu\r\n+     */\r\n+    public List<VideoStream> getEssentialVideoStreams() throws ParsingException {\r\n+        if (!essentialDataLoaded) {\r\n+            throw new ParsingException(\"Essential data must be loaded first\");\r\n+        }\r\n+        return getVideoStreams();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Lấy danh sách các luồng âm thanh cần thiết đã được tải trong giai đoạn 1.\r\n+     *\r\n+     * @return Danh sách các luồng âm thanh cần thiết\r\n+     * @throws ParsingException nếu có lỗi khi phân tích dữ liệu\r\n+     */\r\n+    public List<AudioStream> getEssentialAudioStreams() throws ParsingException {\r\n+        if (!essentialDataLoaded) {\r\n+            throw new ParsingException(\"Essential data must be loaded first\");\r\n+        }\r\n+        return getAudioStreams();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Kiểm tra xem dữ liệu thiết yếu đã được tải hay chưa.\r\n+     *\r\n+     * @return true nếu dữ liệu thiết yếu đã được tải, false nếu chưa\r\n+     */\r\n+    public boolean isEssentialDataLoaded() {\r\n+        return essentialDataLoaded;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Kiểm tra xem dữ liệu bổ sung đã được tải hay chưa.\r\n+     *\r\n+     * @return true nếu dữ liệu bổ sung đã được tải, false nếu chưa\r\n+     */\r\n+    public boolean isAdditionalDataLoaded() {\r\n+        return additionalDataLoaded;\r\n+    }\r\n+} \n\\ No newline at end of file\n"
                }
            ],
            "date": 1741940570352,
            "name": "Commit-0",
            "content": "package org.schabi.newpipe.extractor.services.youtube.extractors;\r\n\r\nimport static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.CONTENT_CHECK_OK;\r\nimport static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.NEXT;\r\nimport static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.RACY_CHECK_OK;\r\nimport static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.VIDEO_ID;\r\nimport static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonPostResponse;\r\nimport static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.prepareDesktopJsonBuilder;\r\n\r\nimport com.grack.nanojson.JsonWriter;\r\n\r\nimport org.schabi.newpipe.extractor.StreamingService;\r\nimport org.schabi.newpipe.extractor.downloader.Downloader;\r\nimport org.schabi.newpipe.extractor.exceptions.ExtractionException;\r\nimport org.schabi.newpipe.extractor.exceptions.ParsingException;\r\nimport org.schabi.newpipe.extractor.linkhandler.LinkHandler;\r\nimport org.schabi.newpipe.extractor.localization.ContentCountry;\r\nimport org.schabi.newpipe.extractor.localization.Localization;\r\nimport org.schabi.newpipe.extractor.services.youtube.PoTokenProvider;\r\nimport org.schabi.newpipe.extractor.services.youtube.PoTokenResult;\r\nimport org.schabi.newpipe.extractor.stream.AudioStream;\r\nimport org.schabi.newpipe.extractor.stream.VideoStream;\r\n\r\nimport java.io.IOException;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.List;\r\n\r\nimport javax.annotation.Nonnull;\r\nimport javax.annotation.Nullable;\r\n\r\n/**\r\n * Một phiên bản cải tiến của YoutubeStreamExtractor hỗ trợ tải dữ liệu theo 2 giai đoạn.\r\n * <p>\r\n * Giai đoạn 1: Tải các thông tin cần thiết để phát video ngay lập tức (URL phát, định dạng video/audio)\r\n * Giai đoạn 2: Tải các thông tin bổ sung dưới nền (mô tả, bình luận, video liên quan, v.v.)\r\n */\r\npublic class YoutubeStreamExtractorTwoPhase extends YoutubeStreamExtractor {\r\n\r\n    private boolean essentialDataLoaded = false;\r\n    private boolean additionalDataLoaded = false;\r\n\r\n    public YoutubeStreamExtractorTwoPhase(final StreamingService service, final LinkHandler linkHandler) {\r\n        super(service, linkHandler);\r\n    }\r\n\r\n    /**\r\n     * Tải các thông tin cần thiết để phát video ngay lập tức.\r\n     * Phương thức này nên được gọi trước khi gọi các phương thức getEssentialXXX().\r\n     *\r\n     * @param downloader Downloader để tải dữ liệu\r\n     * @throws IOException        nếu có lỗi khi tải dữ liệu\r\n     * @throws ExtractionException nếu có lỗi khi trích xuất dữ liệu\r\n     */\r\n    public void fetchEssentialData(@Nonnull final Downloader downloader)\r\n            throws IOException, ExtractionException {\r\n        if (essentialDataLoaded) {\r\n            return;\r\n        }\r\n\r\n        final String videoId = getId();\r\n        final Localization localization = getExtractorLocalization();\r\n        final ContentCountry contentCountry = getExtractorContentCountry();\r\n\r\n        final PoTokenProvider poTokenproviderInstance = poTokenProvider;\r\n        final boolean noPoTokenProviderSet = poTokenproviderInstance == null;\r\n\r\n        // Chỉ tải dữ liệu từ client HTML5 để có được URL phát nhanh nhất\r\n        fetchHtml5Client(localization, contentCountry, videoId, poTokenproviderInstance,\r\n                noPoTokenProviderSet);\r\n\r\n        setStreamType();\r\n\r\n        essentialDataLoaded = true;\r\n    }\r\n\r\n    /**\r\n     * Tải các thông tin bổ sung dưới nền.\r\n     * Phương thức này nên được gọi sau khi gọi fetchEssentialData() và video đã bắt đầu phát.\r\n     *\r\n     * @param downloader Downloader để tải dữ liệu\r\n     * @throws IOException        nếu có lỗi khi tải dữ liệu\r\n     * @throws ExtractionException nếu có lỗi khi trích xuất dữ liệu\r\n     */\r\n    public void fetchAdditionalData(@Nonnull final Downloader downloader)\r\n            throws IOException, ExtractionException {\r\n        if (additionalDataLoaded) {\r\n            return;\r\n        }\r\n\r\n        if (!essentialDataLoaded) {\r\n            fetchEssentialData(downloader);\r\n        }\r\n\r\n        final String videoId = getId();\r\n        final Localization localization = getExtractorLocalization();\r\n        final ContentCountry contentCountry = getExtractorContentCountry();\r\n\r\n        final PoTokenProvider poTokenproviderInstance = poTokenProvider;\r\n        final boolean noPoTokenProviderSet = poTokenproviderInstance == null;\r\n\r\n        // Tải dữ liệu từ client Android để có thêm thông tin\r\n        final PoTokenResult androidPoTokenResult = noPoTokenProviderSet ? null\r\n                : poTokenproviderInstance.getAndroidClientPoToken(videoId);\r\n        fetchAndroidClient(localization, contentCountry, videoId, androidPoTokenResult);\r\n\r\n        // Tải dữ liệu từ client iOS nếu cần\r\n        if (fetchIosClient) {\r\n            final PoTokenResult iosPoTokenResult = noPoTokenProviderSet ? null\r\n                    : poTokenproviderInstance.getIosClientPoToken(videoId);\r\n            fetchIosClient(localization, contentCountry, videoId, iosPoTokenResult);\r\n        }\r\n\r\n        // Tải dữ liệu \"next\" (video liên quan, v.v.)\r\n        final byte[] nextBody = JsonWriter.string(\r\n                prepareDesktopJsonBuilder(localization, contentCountry)\r\n                        .value(VIDEO_ID, videoId)\r\n                        .value(CONTENT_CHECK_OK, true)\r\n                        .value(RACY_CHECK_OK, true)\r\n                        .done())\r\n                .getBytes(StandardCharsets.UTF_8);\r\n        nextResponse = getJsonPostResponse(NEXT, nextBody, localization);\r\n\r\n        additionalDataLoaded = true;\r\n    }\r\n\r\n    /**\r\n     * Ghi đè phương thức onFetchPage để sử dụng cơ chế tải 2 giai đoạn.\r\n     * Phương thức này sẽ tải cả dữ liệu cần thiết và dữ liệu bổ sung.\r\n     */\r\n    @Override\r\n    public void onFetchPage(@Nonnull final Downloader downloader)\r\n            throws IOException, ExtractionException {\r\n        fetchEssentialData(downloader);\r\n        fetchAdditionalData(downloader);\r\n    }\r\n\r\n    /**\r\n     * Lấy danh sách các luồng video cần thiết để phát video ngay lập tức.\r\n     * Phương thức này chỉ yêu cầu dữ liệu từ giai đoạn 1.\r\n     */\r\n    public List<VideoStream> getEssentialVideoStreams() throws ExtractionException {\r\n        if (!essentialDataLoaded) {\r\n            throw new ExtractionException(\"Essential data not loaded yet\");\r\n        }\r\n\r\n        return getVideoStreams();\r\n    }\r\n\r\n    /**\r\n     * Lấy danh sách các luồng âm thanh cần thiết để phát video ngay lập tức.\r\n     * Phương thức này chỉ yêu cầu dữ liệu từ giai đoạn 1.\r\n     */\r\n    public List<AudioStream> getEssentialAudioStreams() throws ExtractionException {\r\n        if (!essentialDataLoaded) {\r\n            throw new ExtractionException(\"Essential data not loaded yet\");\r\n        }\r\n\r\n        return getAudioStreams();\r\n    }\r\n\r\n    /**\r\n     * Kiểm tra xem dữ liệu cần thiết đã được tải hay chưa.\r\n     */\r\n    public boolean isEssentialDataLoaded() {\r\n        return essentialDataLoaded;\r\n    }\r\n\r\n    /**\r\n     * Kiểm tra xem dữ liệu bổ sung đã được tải hay chưa.\r\n     */\r\n    public boolean isAdditionalDataLoaded() {\r\n        return additionalDataLoaded;\r\n    }\r\n\r\n    /**\r\n     * Ghi đè phương thức assertPageFetched để kiểm tra xem dữ liệu cần thiết đã được tải hay chưa.\r\n     */\r\n    @Override\r\n    protected void assertPageFetched() throws ExtractionException {\r\n        if (!essentialDataLoaded) {\r\n            throw new ExtractionException(\"Essential data not loaded yet\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Kiểm tra xem dữ liệu bổ sung đã được tải hay chưa.\r\n     * Phương thức này nên được gọi trước khi gọi các phương thức yêu cầu dữ liệu bổ sung.\r\n     */\r\n    protected void assertAdditionalDataFetched() throws ExtractionException {\r\n        if (!additionalDataLoaded) {\r\n            throw new ExtractionException(\"Additional data not loaded yet\");\r\n        }\r\n    }\r\n} "
        }
    ]
}