{
    "sourceFile": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeStreamExtractorHelper.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1741940650455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741941126296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,24 +93,75 @@\n                         .setThumbnailUrl(extractor.getThumbnailUrl())\r\n                         .setDuration(extractor.getLength())\r\n                         .setAudioStreams(extractor.getAudioStreams())\r\n                         .setVideoStreams(extractor.getVideoStreams())\r\n-                        .setVideoOnlyStreams(extractor.getVideoOnlyStreams())\r\n-                        .setDescription(extractor.getDescription())\r\n-                        .setViewCount(extractor.getViewCount())\r\n-                        .setUploadDate(extractor.getUploadDate())\r\n-                        .setUploaderAvatarUrl(extractor.getUploaderAvatarUrl())\r\n-                        .setSubChannelUrl(extractor.getSubChannelUrl())\r\n-                        .setSubChannelName(extractor.getSubChannelName())\r\n-                        .setSubChannelAvatarUrl(extractor.getSubChannelAvatarUrl())\r\n-                        .setLikeCount(extractor.getLikeCount())\r\n-                        .setDislikeCount(extractor.getDislikeCount())\r\n-                        .setSubscriberCount(extractor.getSubscriberCount())\r\n-                        .setCategory(extractor.getCategory())\r\n-                        .setTags(extractor.getTags())\r\n-                        .setFeedUrl(extractor.getFeedUrl())\r\n-                        .setRelatedItems(extractor.getRelatedItems());\r\n+                        .setVideoOnlyStreams(extractor.getVideoOnlyStreams());\r\n \r\n+                // Thêm các thông tin bổ sung nếu có\r\n+                try {\r\n+                    builder.setDescription(extractor.getDescription());\r\n+                } catch (Exception e) {\r\n+                    // Bỏ qua nếu không lấy được mô tả\r\n+                }\r\n+\r\n+                try {\r\n+                    builder.setViewCount(extractor.getViewCount());\r\n+                } catch (Exception e) {\r\n+                    // Bỏ qua nếu không lấy được lượt xem\r\n+                }\r\n+\r\n+                try {\r\n+                    builder.setUploadDate(extractor.getUploadDate());\r\n+                } catch (Exception e) {\r\n+                    // Bỏ qua nếu không lấy được ngày tải lên\r\n+                }\r\n+\r\n+                try {\r\n+                    builder.setUploaderAvatarUrl(extractor.getUploaderAvatarUrl());\r\n+                } catch (Exception e) {\r\n+                    // Bỏ qua nếu không lấy được avatar người tải lên\r\n+                }\r\n+\r\n+                try {\r\n+                    builder.setSubChannelUrl(extractor.getSubChannelUrl());\r\n+                    builder.setSubChannelName(extractor.getSubChannelName());\r\n+                    builder.setSubChannelAvatarUrl(extractor.getSubChannelAvatarUrl());\r\n+                } catch (Exception e) {\r\n+                    // Bỏ qua nếu không lấy được thông tin kênh phụ\r\n+                }\r\n+\r\n+                try {\r\n+                    builder.setLikeCount(extractor.getLikeCount());\r\n+                    builder.setDislikeCount(extractor.getDislikeCount());\r\n+                } catch (Exception e) {\r\n+                    // Bỏ qua nếu không lấy được lượt thích/không thích\r\n+                }\r\n+\r\n+                try {\r\n+                    builder.setSubscriberCount(extractor.getSubscriberCount());\r\n+                } catch (Exception e) {\r\n+                    // Bỏ qua nếu không lấy được số người đăng ký\r\n+                }\r\n+\r\n+                try {\r\n+                    builder.setCategory(extractor.getCategory());\r\n+                    builder.setTags(extractor.getTags());\r\n+                } catch (Exception e) {\r\n+                    // Bỏ qua nếu không lấy được danh mục và thẻ\r\n+                }\r\n+\r\n+                try {\r\n+                    builder.setFeedUrl(extractor.getFeedUrl());\r\n+                } catch (Exception e) {\r\n+                    // Bỏ qua nếu không lấy được URL feed\r\n+                }\r\n+\r\n+                try {\r\n+                    builder.setRelatedItems(extractor.getRelatedItems());\r\n+                } catch (Exception e) {\r\n+                    // Bỏ qua nếu không lấy được video liên quan\r\n+                }\r\n+\r\n                 return builder.build();\r\n             }\r\n         });\r\n     }\r\n"
                },
                {
                    "date": 1741941398329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+package org.schabi.newpipe.extractor.services.youtube;\r\n+\r\n+import org.schabi.newpipe.extractor.NewPipe;\r\n+import org.schabi.newpipe.extractor.ServiceList;\r\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\r\n+import org.schabi.newpipe.extractor.linkhandler.LinkHandler;\r\n+import org.schabi.newpipe.extractor.linkhandler.LinkHandlerFactory;\r\n+import org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeStreamExtractorTwoPhase;\r\n+import org.schabi.newpipe.extractor.stream.AudioStream;\r\n+import org.schabi.newpipe.extractor.stream.StreamInfo;\r\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\r\n+import org.schabi.newpipe.extractor.stream.StreamType;\r\n+import org.schabi.newpipe.extractor.stream.VideoStream;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.Collections;\r\n+import java.util.List;\r\n+import java.util.concurrent.Callable;\r\n+import java.util.concurrent.ExecutorService;\r\n+import java.util.concurrent.Future;\r\n+\r\n+/**\r\n+ * Lớp tiện ích để giúp ứng dụng Android sử dụng cơ chế tải 2 giai đoạn một cách dễ dàng.\r\n+ */\r\n+public class YoutubeStreamExtractorHelper {\r\n+\r\n+    private YoutubeStreamExtractorHelper() {\r\n+        // Không cho phép tạo đối tượng\r\n+    }\r\n+\r\n+    /**\r\n+     * Tải thông tin cần thiết để phát video ngay lập tức.\r\n+     *\r\n+     * @param url URL của video YouTube\r\n+     * @return Đối tượng StreamInfo chứa thông tin cần thiết để phát video\r\n+     * @throws ExtractionException nếu có lỗi khi trích xuất dữ liệu\r\n+     * @throws IOException        nếu có lỗi khi tải dữ liệu\r\n+     */\r\n+    public static StreamInfo getEssentialInfo(final String url)\r\n+            throws ExtractionException, IOException {\r\n+        final LinkHandlerFactory factory = ServiceList.YouTubeTwoPhase.getStreamLHFactory();\r\n+        final LinkHandler linkHandler = factory.fromUrl(url);\r\n+        final YoutubeStreamExtractorTwoPhase extractor =\r\n+                (YoutubeStreamExtractorTwoPhase) ServiceList.YouTubeTwoPhase.getStreamExtractor(linkHandler);\r\n+\r\n+        // Tải dữ liệu cần thiết\r\n+        extractor.fetchEssentialData(NewPipe.getDownloader());\r\n+\r\n+        // Tạo đối tượng StreamInfo với thông tin cần thiết\r\n+        return new StreamInfo(\r\n+                ServiceList.YouTubeTwoPhase.getServiceId(),\r\n+                url,\r\n+                url,\r\n+                extractor.getName(),\r\n+                StreamType.VIDEO_STREAM,\r\n+                extractor.getId(),\r\n+                \"\",\r\n+                Collections.emptyList(),\r\n+                extractor.getUploaderName(),\r\n+                extractor.getUploaderUrl(),\r\n+                extractor.getEssentialVideoStreams(),\r\n+                extractor.getEssentialAudioStreams(),\r\n+                extractor.getVideoOnlyStreams(),\r\n+                extractor.getLength(),\r\n+                0\r\n+        );\r\n+    }\r\n+\r\n+    /**\r\n+     * Tải thông tin bổ sung dưới nền.\r\n+     *\r\n+     * @param url            URL của video YouTube\r\n+     * @param executorService ExecutorService để chạy tác vụ dưới nền\r\n+     * @return Future chứa đối tượng StreamInfo đầy đủ\r\n+     */\r\n+    public static Future<StreamInfo> getAdditionalInfoAsync(final String url,\r\n+                                                           final ExecutorService executorService) {\r\n+        return executorService.submit(new Callable<StreamInfo>() {\r\n+            @Override\r\n+            public StreamInfo call() throws Exception {\r\n+                final LinkHandlerFactory factory = ServiceList.YouTubeTwoPhase.getStreamLHFactory();\r\n+                final LinkHandler linkHandler = factory.fromUrl(url);\r\n+                final YoutubeStreamExtractorTwoPhase extractor =\r\n+                        (YoutubeStreamExtractorTwoPhase) ServiceList.YouTubeTwoPhase.getStreamExtractor(linkHandler);\r\n+\r\n+                // Tải dữ liệu bổ sung\r\n+                extractor.fetchAdditionalData(NewPipe.getDownloader());\r\n+\r\n+                // Tạo đối tượng StreamInfo đầy đủ\r\n+                return new StreamInfo(\r\n+                        ServiceList.YouTubeTwoPhase.getServiceId(),\r\n+                        url,\r\n+                        url,\r\n+                        extractor.getName(),\r\n+                        StreamType.VIDEO_STREAM,\r\n+                        extractor.getId(),\r\n+                        extractor.getDescription() != null ? extractor.getDescription().getContent() : \"\",\r\n+                        Collections.emptyList(),\r\n+                        extractor.getUploaderName(),\r\n+                        extractor.getUploaderUrl(),\r\n+                        extractor.getVideoStreams(),\r\n+                        extractor.getAudioStreams(),\r\n+                        extractor.getVideoOnlyStreams(),\r\n+                        extractor.getLength(),\r\n+                        extractor.getViewCount()\r\n+                );\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    /**\r\n+     * Lấy danh sách các luồng video cần thiết để phát video ngay lập tức.\r\n+     *\r\n+     * @param url URL của video YouTube\r\n+     * @return Danh sách các luồng video\r\n+     * @throws ExtractionException nếu có lỗi khi trích xuất dữ liệu\r\n+     * @throws IOException        nếu có lỗi khi tải dữ liệu\r\n+     */\r\n+    public static List<VideoStream> getEssentialVideoStreams(final String url)\r\n+            throws ExtractionException, IOException {\r\n+        final LinkHandlerFactory factory = ServiceList.YouTubeTwoPhase.getStreamLHFactory();\r\n+        final LinkHandler linkHandler = factory.fromUrl(url);\r\n+        final YoutubeStreamExtractorTwoPhase extractor =\r\n+                (YoutubeStreamExtractorTwoPhase) ServiceList.YouTubeTwoPhase.getStreamExtractor(linkHandler);\r\n+\r\n+        // Tải dữ liệu cần thiết\r\n+        extractor.fetchEssentialData(NewPipe.getDownloader());\r\n+\r\n+        // Lấy danh sách các luồng video\r\n+        return extractor.getEssentialVideoStreams();\r\n+    }\r\n+\r\n+    /**\r\n+     * Lấy danh sách các luồng âm thanh cần thiết để phát video ngay lập tức.\r\n+     *\r\n+     * @param url URL của video YouTube\r\n+     * @return Danh sách các luồng âm thanh\r\n+     * @throws ExtractionException nếu có lỗi khi trích xuất dữ liệu\r\n+     * @throws IOException        nếu có lỗi khi tải dữ liệu\r\n+     */\r\n+    public static List<AudioStream> getEssentialAudioStreams(final String url)\r\n+            throws ExtractionException, IOException {\r\n+        final LinkHandlerFactory factory = ServiceList.YouTubeTwoPhase.getStreamLHFactory();\r\n+        final LinkHandler linkHandler = factory.fromUrl(url);\r\n+        final YoutubeStreamExtractorTwoPhase extractor =\r\n+                (YoutubeStreamExtractorTwoPhase) ServiceList.YouTubeTwoPhase.getStreamExtractor(linkHandler);\r\n+\r\n+        // Tải dữ liệu cần thiết\r\n+        extractor.fetchEssentialData(NewPipe.getDownloader());\r\n+\r\n+        // Lấy danh sách các luồng âm thanh\r\n+        return extractor.getEssentialAudioStreams();\r\n+    }\r\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1741941575632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,14 +7,12 @@\n import org.schabi.newpipe.extractor.linkhandler.LinkHandlerFactory;\r\n import org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeStreamExtractorTwoPhase;\r\n import org.schabi.newpipe.extractor.stream.AudioStream;\r\n import org.schabi.newpipe.extractor.stream.StreamInfo;\r\n-import org.schabi.newpipe.extractor.stream.StreamInfoItem;\r\n import org.schabi.newpipe.extractor.stream.StreamType;\r\n import org.schabi.newpipe.extractor.stream.VideoStream;\r\n \r\n import java.io.IOException;\r\n-import java.util.Collections;\r\n import java.util.List;\r\n import java.util.concurrent.Callable;\r\n import java.util.concurrent.ExecutorService;\r\n import java.util.concurrent.Future;\r\n@@ -46,25 +44,27 @@\n         // Tải dữ liệu cần thiết\r\n         extractor.fetchEssentialData(NewPipe.getDownloader());\r\n \r\n         // Tạo đối tượng StreamInfo với thông tin cần thiết\r\n-        return new StreamInfo(\r\n+        StreamInfo streamInfo = new StreamInfo(\r\n                 ServiceList.YouTubeTwoPhase.getServiceId(),\r\n                 url,\r\n                 url,\r\n-                extractor.getName(),\r\n                 StreamType.VIDEO_STREAM,\r\n                 extractor.getId(),\r\n-                \"\",\r\n-                Collections.emptyList(),\r\n-                extractor.getUploaderName(),\r\n-                extractor.getUploaderUrl(),\r\n-                extractor.getEssentialVideoStreams(),\r\n-                extractor.getEssentialAudioStreams(),\r\n-                extractor.getVideoOnlyStreams(),\r\n-                extractor.getLength(),\r\n-                0\r\n+                extractor.getName(),\r\n+                0 // ageLimit\r\n         );\r\n+\r\n+        // Thiết lập các thông tin cần thiết\r\n+        streamInfo.setVideoStreams(extractor.getEssentialVideoStreams());\r\n+        streamInfo.setAudioStreams(extractor.getEssentialAudioStreams());\r\n+        streamInfo.setVideoOnlyStreams(extractor.getVideoOnlyStreams());\r\n+        streamInfo.setUploaderName(extractor.getUploaderName());\r\n+        streamInfo.setUploaderUrl(extractor.getUploaderUrl());\r\n+        streamInfo.setLength(extractor.getLength());\r\n+\r\n+        return streamInfo;\r\n     }\r\n \r\n     /**\r\n      * Tải thông tin bổ sung dưới nền.\r\n@@ -86,25 +86,37 @@\n                 // Tải dữ liệu bổ sung\r\n                 extractor.fetchAdditionalData(NewPipe.getDownloader());\r\n \r\n                 // Tạo đối tượng StreamInfo đầy đủ\r\n-                return new StreamInfo(\r\n+                StreamInfo streamInfo = new StreamInfo(\r\n                         ServiceList.YouTubeTwoPhase.getServiceId(),\r\n                         url,\r\n                         url,\r\n-                        extractor.getName(),\r\n                         StreamType.VIDEO_STREAM,\r\n                         extractor.getId(),\r\n-                        extractor.getDescription() != null ? extractor.getDescription().getContent() : \"\",\r\n-                        Collections.emptyList(),\r\n-                        extractor.getUploaderName(),\r\n-                        extractor.getUploaderUrl(),\r\n-                        extractor.getVideoStreams(),\r\n-                        extractor.getAudioStreams(),\r\n-                        extractor.getVideoOnlyStreams(),\r\n-                        extractor.getLength(),\r\n-                        extractor.getViewCount()\r\n+                        extractor.getName(),\r\n+                        0 // ageLimit\r\n                 );\r\n+\r\n+                // Thiết lập các thông tin đầy đủ\r\n+                streamInfo.setVideoStreams(extractor.getVideoStreams());\r\n+                streamInfo.setAudioStreams(extractor.getAudioStreams());\r\n+                streamInfo.setVideoOnlyStreams(extractor.getVideoOnlyStreams());\r\n+                streamInfo.setUploaderName(extractor.getUploaderName());\r\n+                streamInfo.setUploaderUrl(extractor.getUploaderUrl());\r\n+                streamInfo.setLength(extractor.getLength());\r\n+                streamInfo.setViewCount(extractor.getViewCount());\r\n+\r\n+                // Thêm các thông tin bổ sung nếu có\r\n+                try {\r\n+                    if (extractor.getDescription() != null) {\r\n+                        streamInfo.setDescription(extractor.getDescription());\r\n+                    }\r\n+                } catch (Exception e) {\r\n+                    // Bỏ qua nếu không lấy được mô tả\r\n+                }\r\n+\r\n+                return streamInfo;\r\n             }\r\n         });\r\n     }\r\n \r\n"
                },
                {
                    "date": 1741943508069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,301 @@\n- \n\\ No newline at end of file\n+/*\r\n+ * Created by WincaTubeExtractor on 14.03.2024.\r\n+ *\r\n+ * Copyright (C) 2024 WincaTubeExtractor\r\n+ * YoutubeStreamExtractorHelper.java is part of NewPipe Extractor.\r\n+ *\r\n+ * NewPipe Extractor is free software: you can redistribute it and/or modify\r\n+ * it under the terms of the GNU General Public License as published by\r\n+ * the Free Software Foundation, either version 3 of the License, or\r\n+ * (at your option) any later version.\r\n+ *\r\n+ * NewPipe Extractor is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n+ * GNU General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU General Public License\r\n+ * along with NewPipe Extractor. If not, see <https://www.gnu.org/licenses/>.\r\n+ */\r\n+\r\n+package org.schabi.newpipe.extractor.services.youtube;\r\n+\r\n+import org.schabi.newpipe.extractor.NewPipe;\r\n+import org.schabi.newpipe.extractor.StreamingService;\r\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\r\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\r\n+import org.schabi.newpipe.extractor.linkhandler.LinkHandlerFactory;\r\n+import org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeStreamExtractorTwoPhase;\r\n+import org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeStreamLinkHandlerFactory;\r\n+import org.schabi.newpipe.extractor.stream.StreamInfo;\r\n+import org.schabi.newpipe.extractor.stream.StreamType;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.concurrent.ExecutorService;\r\n+import java.util.concurrent.Future;\r\n+\r\n+/**\r\n+ * Lớp tiện ích giúp ứng dụng Android sử dụng cơ chế tải 2 giai đoạn một cách dễ dàng\r\n+ */\r\n+public class YoutubeStreamExtractorHelper {\r\n+\r\n+    private YoutubeStreamExtractorHelper() {\r\n+        // Ngăn khởi tạo\r\n+    }\r\n+\r\n+    /**\r\n+     * Tải thông tin cần thiết để phát video ngay lập tức (giai đoạn 1)\r\n+     * @param url URL của video YouTube\r\n+     * @return Đối tượng StreamInfo với thông tin cần thiết để phát video\r\n+     * @throws ExtractionException nếu có lỗi khi trích xuất dữ liệu\r\n+     * @throws IOException nếu có lỗi khi tải dữ liệu\r\n+     */\r\n+    public static StreamInfo getEssentialInfo(final String url)\r\n+            throws ExtractionException, IOException {\r\n+        // Lấy dịch vụ YouTube\r\n+        final StreamingService service = NewPipe.getServiceByUrl(url);\r\n+        if (service == null) {\r\n+            throw new ExtractionException(\"Không thể xác định dịch vụ cho URL: \" + url);\r\n+        }\r\n+\r\n+        // Tạo link handler\r\n+        final LinkHandlerFactory linkHandlerFactory = service.getStreamLinkHandlerFactory();\r\n+        if (!(linkHandlerFactory instanceof YoutubeStreamLinkHandlerFactory)) {\r\n+            throw new ExtractionException(\"URL không phải là URL video YouTube hợp lệ\");\r\n+        }\r\n+\r\n+        // Tạo extractor và tải dữ liệu cần thiết\r\n+        final YoutubeStreamExtractorTwoPhase extractor = new YoutubeStreamExtractorTwoPhase(\r\n+                service, linkHandlerFactory.fromUrl(url));\r\n+        extractor.fetchEssentialData(NewPipe.getDownloader());\r\n+        \r\n+        // Tạo đối tượng StreamInfo với thông tin cần thiết\r\n+        final StreamInfo streamInfo = new StreamInfo(\r\n+                service.getServiceId(),\r\n+                extractor.getUrl(),\r\n+                extractor.getOriginalUrl(),\r\n+                extractor.getStreamType(),\r\n+                extractor.getId(),\r\n+                extractor.getName(),\r\n+                extractor.getAgeLimit()\r\n+        );\r\n+\r\n+        // Thiết lập các thông tin cần thiết\r\n+        streamInfo.setVideoStreams(extractor.getEssentialVideoStreams());\r\n+        streamInfo.setAudioStreams(extractor.getEssentialAudioStreams());\r\n+        streamInfo.setVideoOnlyStreams(extractor.getVideoOnlyStreams());\r\n+        \r\n+        // Thông tin cơ bản về người tải lên\r\n+        try {\r\n+            streamInfo.setUploaderName(extractor.getUploaderName());\r\n+        } catch (final Exception e) {\r\n+            streamInfo.addError(e);\r\n+        }\r\n+        \r\n+        try {\r\n+            streamInfo.setUploaderUrl(extractor.getUploaderUrl());\r\n+        } catch (final Exception e) {\r\n+            streamInfo.addError(e);\r\n+        }\r\n+        \r\n+        // Thông tin về thời lượng video\r\n+        try {\r\n+            streamInfo.setDuration(extractor.getLength());\r\n+        } catch (final Exception e) {\r\n+            streamInfo.addError(e);\r\n+        }\r\n+        \r\n+        // Hình thu nhỏ\r\n+        try {\r\n+            streamInfo.setThumbnails(extractor.getThumbnails());\r\n+        } catch (final Exception e) {\r\n+            streamInfo.addError(e);\r\n+        }\r\n+        \r\n+        return streamInfo;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Tải thông tin bổ sung dưới nền (giai đoạn 2)\r\n+     * @param url URL của video YouTube\r\n+     * @param executorService ExecutorService để thực hiện tải dữ liệu bất đồng bộ\r\n+     * @return Future chứa đối tượng StreamInfo đầy đủ\r\n+     */\r\n+    public static Future<StreamInfo> getAdditionalInfoAsync(final String url,\r\n+                                                           final ExecutorService executorService) {\r\n+        return executorService.submit(() -> {\r\n+            try {\r\n+                // Lấy dịch vụ YouTube\r\n+                final StreamingService service = NewPipe.getServiceByUrl(url);\r\n+                if (service == null) {\r\n+                    throw new ExtractionException(\"Không thể xác định dịch vụ cho URL: \" + url);\r\n+                }\r\n+\r\n+                // Tạo link handler\r\n+                final LinkHandlerFactory linkHandlerFactory = service.getStreamLinkHandlerFactory();\r\n+                if (!(linkHandlerFactory instanceof YoutubeStreamLinkHandlerFactory)) {\r\n+                    throw new ExtractionException(\"URL không phải là URL video YouTube hợp lệ\");\r\n+                }\r\n+\r\n+                // Tạo extractor và tải dữ liệu bổ sung\r\n+                final YoutubeStreamExtractorTwoPhase extractor = new YoutubeStreamExtractorTwoPhase(\r\n+                        service, linkHandlerFactory.fromUrl(url));\r\n+                extractor.fetchAdditionalData(NewPipe.getDownloader());\r\n+                \r\n+                // Tạo đối tượng StreamInfo đầy đủ\r\n+                final StreamInfo streamInfo = new StreamInfo(\r\n+                        service.getServiceId(),\r\n+                        extractor.getUrl(),\r\n+                        extractor.getOriginalUrl(),\r\n+                        extractor.getStreamType(),\r\n+                        extractor.getId(),\r\n+                        extractor.getName(),\r\n+                        extractor.getAgeLimit()\r\n+                );\r\n+\r\n+                // Thiết lập các thông tin đầy đủ\r\n+                // Streams\r\n+                streamInfo.setDashMpdUrl(extractor.getDashMpdUrl());\r\n+                streamInfo.setHlsUrl(extractor.getHlsUrl());\r\n+                streamInfo.setVideoStreams(extractor.getVideoStreams());\r\n+                streamInfo.setAudioStreams(extractor.getAudioStreams());\r\n+                streamInfo.setVideoOnlyStreams(extractor.getVideoOnlyStreams());\r\n+                \r\n+                // Thông tin người tải lên\r\n+                try {\r\n+                    streamInfo.setUploaderName(extractor.getUploaderName());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                try {\r\n+                    streamInfo.setUploaderUrl(extractor.getUploaderUrl());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                try {\r\n+                    streamInfo.setUploaderAvatars(extractor.getUploaderAvatars());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                try {\r\n+                    streamInfo.setUploaderVerified(extractor.isUploaderVerified());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                try {\r\n+                    streamInfo.setUploaderSubscriberCount(extractor.getUploaderSubscriberCount());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                // Thông tin kênh phụ\r\n+                try {\r\n+                    streamInfo.setSubChannelName(extractor.getSubChannelName());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                try {\r\n+                    streamInfo.setSubChannelUrl(extractor.getSubChannelUrl());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                try {\r\n+                    streamInfo.setSubChannelAvatars(extractor.getSubChannelAvatars());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                // Thông tin video\r\n+                try {\r\n+                    streamInfo.setThumbnails(extractor.getThumbnails());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                try {\r\n+                    streamInfo.setDuration(extractor.getLength());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                try {\r\n+                    streamInfo.setDescription(extractor.getDescription());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                try {\r\n+                    streamInfo.setViewCount(extractor.getViewCount());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                try {\r\n+                    streamInfo.setTextualUploadDate(extractor.getTextualUploadDate());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                try {\r\n+                    streamInfo.setUploadDate(extractor.getUploadDate());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                try {\r\n+                    streamInfo.setLikeCount(extractor.getLikeCount());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                try {\r\n+                    streamInfo.setDislikeCount(extractor.getDislikeCount());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                // Thông tin bổ sung\r\n+                try {\r\n+                    streamInfo.setCategory(extractor.getCategory());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                try {\r\n+                    streamInfo.setLicence(extractor.getLicence());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                try {\r\n+                    streamInfo.setTags(extractor.getTags());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                try {\r\n+                    streamInfo.setMetaInfo(extractor.getMetaInfo());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                // Video liên quan\r\n+                try {\r\n+                    streamInfo.setRelatedItems(extractor.getRelatedItems());\r\n+                } catch (final Exception e) {\r\n+                    streamInfo.addError(e);\r\n+                }\r\n+                \r\n+                return streamInfo;\r\n+            } catch (final Exception e) {\r\n+                throw new RuntimeException(\"Lỗi khi tải thông tin bổ sung\", e);\r\n+            }\r\n+        });\r\n+    }\r\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1741944486332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,19 +19,23 @@\n  */\r\n \r\n package org.schabi.newpipe.extractor.services.youtube;\r\n \r\n+import org.schabi.newpipe.extractor.InfoItem;\r\n+import org.schabi.newpipe.extractor.InfoItemsCollector;\r\n+import org.schabi.newpipe.extractor.MultiInfoItemsCollector;\r\n import org.schabi.newpipe.extractor.NewPipe;\r\n import org.schabi.newpipe.extractor.StreamingService;\r\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\r\n-import org.schabi.newpipe.extractor.exceptions.ParsingException;\r\n+import org.schabi.newpipe.extractor.linkhandler.LinkHandler;\r\n import org.schabi.newpipe.extractor.linkhandler.LinkHandlerFactory;\r\n import org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeStreamExtractorTwoPhase;\r\n import org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeStreamLinkHandlerFactory;\r\n import org.schabi.newpipe.extractor.stream.StreamInfo;\r\n-import org.schabi.newpipe.extractor.stream.StreamType;\r\n \r\n import java.io.IOException;\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n import java.util.concurrent.ExecutorService;\r\n import java.util.concurrent.Future;\r\n \r\n /**\r\n@@ -58,9 +62,9 @@\n             throw new ExtractionException(\"Không thể xác định dịch vụ cho URL: \" + url);\r\n         }\r\n \r\n         // Tạo link handler\r\n-        final LinkHandlerFactory linkHandlerFactory = service.getStreamLinkHandlerFactory();\r\n+        final LinkHandlerFactory linkHandlerFactory = service.getStreamLHFactory();\r\n         if (!(linkHandlerFactory instanceof YoutubeStreamLinkHandlerFactory)) {\r\n             throw new ExtractionException(\"URL không phải là URL video YouTube hợp lệ\");\r\n         }\r\n \r\n@@ -131,9 +135,9 @@\n                     throw new ExtractionException(\"Không thể xác định dịch vụ cho URL: \" + url);\r\n                 }\r\n \r\n                 // Tạo link handler\r\n-                final LinkHandlerFactory linkHandlerFactory = service.getStreamLinkHandlerFactory();\r\n+                final LinkHandlerFactory linkHandlerFactory = service.getStreamLHFactory();\r\n                 if (!(linkHandlerFactory instanceof YoutubeStreamLinkHandlerFactory)) {\r\n                     throw new ExtractionException(\"URL không phải là URL video YouTube hợp lệ\");\r\n                 }\r\n \r\n@@ -286,9 +290,13 @@\n                 }\r\n                 \r\n                 // Video liên quan\r\n                 try {\r\n-                    streamInfo.setRelatedItems(extractor.getRelatedItems());\r\n+                    InfoItemsCollector<? extends InfoItem, ?> relatedItems = extractor.getRelatedItems();\r\n+                    if (relatedItems != null) {\r\n+                        List<InfoItem> items = new ArrayList<>(relatedItems.getItems());\r\n+                        streamInfo.setRelatedItems(items);\r\n+                    }\r\n                 } catch (final Exception e) {\r\n                     streamInfo.addError(e);\r\n                 }\r\n                 \r\n"
                }
            ],
            "date": 1741940650455,
            "name": "Commit-0",
            "content": "package org.schabi.newpipe.extractor.services.youtube;\r\n\r\nimport org.schabi.newpipe.extractor.NewPipe;\r\nimport org.schabi.newpipe.extractor.ServiceList;\r\nimport org.schabi.newpipe.extractor.exceptions.ExtractionException;\r\nimport org.schabi.newpipe.extractor.linkhandler.LinkHandler;\r\nimport org.schabi.newpipe.extractor.linkhandler.LinkHandlerFactory;\r\nimport org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeStreamExtractorTwoPhase;\r\nimport org.schabi.newpipe.extractor.stream.AudioStream;\r\nimport org.schabi.newpipe.extractor.stream.StreamInfo;\r\nimport org.schabi.newpipe.extractor.stream.VideoStream;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.concurrent.Callable;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Future;\r\n\r\n/**\r\n * Lớp tiện ích để giúp ứng dụng Android sử dụng cơ chế tải 2 giai đoạn một cách dễ dàng.\r\n */\r\npublic class YoutubeStreamExtractorHelper {\r\n\r\n    private YoutubeStreamExtractorHelper() {\r\n        // Không cho phép tạo đối tượng\r\n    }\r\n\r\n    /**\r\n     * Tải thông tin cần thiết để phát video ngay lập tức.\r\n     *\r\n     * @param url URL của video YouTube\r\n     * @return Đối tượng StreamInfo chứa thông tin cần thiết để phát video\r\n     * @throws ExtractionException nếu có lỗi khi trích xuất dữ liệu\r\n     * @throws IOException        nếu có lỗi khi tải dữ liệu\r\n     */\r\n    public static StreamInfo getEssentialInfo(final String url)\r\n            throws ExtractionException, IOException {\r\n        final LinkHandlerFactory factory = ServiceList.YouTubeTwoPhase.getStreamLHFactory();\r\n        final LinkHandler linkHandler = factory.fromUrl(url);\r\n        final YoutubeStreamExtractorTwoPhase extractor =\r\n                (YoutubeStreamExtractorTwoPhase) ServiceList.YouTubeTwoPhase.getStreamExtractor(linkHandler);\r\n\r\n        // Tải dữ liệu cần thiết\r\n        extractor.fetchEssentialData(NewPipe.getDownloader());\r\n\r\n        // Tạo đối tượng StreamInfo với thông tin cần thiết\r\n        final StreamInfo.Builder builder = new StreamInfo.Builder()\r\n                .setServiceId(ServiceList.YouTubeTwoPhase.getServiceId())\r\n                .setUrl(url)\r\n                .setOriginalUrl(url)\r\n                .setId(extractor.getId())\r\n                .setName(extractor.getName())\r\n                .setUploaderName(extractor.getUploaderName())\r\n                .setUploaderUrl(extractor.getUploaderUrl())\r\n                .setThumbnailUrl(extractor.getThumbnailUrl())\r\n                .setDuration(extractor.getLength())\r\n                .setAudioStreams(extractor.getEssentialAudioStreams())\r\n                .setVideoStreams(extractor.getEssentialVideoStreams())\r\n                .setVideoOnlyStreams(extractor.getVideoOnlyStreams());\r\n\r\n        return builder.build();\r\n    }\r\n\r\n    /**\r\n     * Tải thông tin bổ sung dưới nền.\r\n     *\r\n     * @param url            URL của video YouTube\r\n     * @param executorService ExecutorService để chạy tác vụ dưới nền\r\n     * @return Future chứa đối tượng StreamInfo đầy đủ\r\n     */\r\n    public static Future<StreamInfo> getAdditionalInfoAsync(final String url,\r\n                                                           final ExecutorService executorService) {\r\n        return executorService.submit(new Callable<StreamInfo>() {\r\n            @Override\r\n            public StreamInfo call() throws Exception {\r\n                final LinkHandlerFactory factory = ServiceList.YouTubeTwoPhase.getStreamLHFactory();\r\n                final LinkHandler linkHandler = factory.fromUrl(url);\r\n                final YoutubeStreamExtractorTwoPhase extractor =\r\n                        (YoutubeStreamExtractorTwoPhase) ServiceList.YouTubeTwoPhase.getStreamExtractor(linkHandler);\r\n\r\n                // Tải dữ liệu bổ sung\r\n                extractor.fetchAdditionalData(NewPipe.getDownloader());\r\n\r\n                // Tạo đối tượng StreamInfo đầy đủ\r\n                final StreamInfo.Builder builder = new StreamInfo.Builder()\r\n                        .setServiceId(ServiceList.YouTubeTwoPhase.getServiceId())\r\n                        .setUrl(url)\r\n                        .setOriginalUrl(url)\r\n                        .setId(extractor.getId())\r\n                        .setName(extractor.getName())\r\n                        .setUploaderName(extractor.getUploaderName())\r\n                        .setUploaderUrl(extractor.getUploaderUrl())\r\n                        .setThumbnailUrl(extractor.getThumbnailUrl())\r\n                        .setDuration(extractor.getLength())\r\n                        .setAudioStreams(extractor.getAudioStreams())\r\n                        .setVideoStreams(extractor.getVideoStreams())\r\n                        .setVideoOnlyStreams(extractor.getVideoOnlyStreams())\r\n                        .setDescription(extractor.getDescription())\r\n                        .setViewCount(extractor.getViewCount())\r\n                        .setUploadDate(extractor.getUploadDate())\r\n                        .setUploaderAvatarUrl(extractor.getUploaderAvatarUrl())\r\n                        .setSubChannelUrl(extractor.getSubChannelUrl())\r\n                        .setSubChannelName(extractor.getSubChannelName())\r\n                        .setSubChannelAvatarUrl(extractor.getSubChannelAvatarUrl())\r\n                        .setLikeCount(extractor.getLikeCount())\r\n                        .setDislikeCount(extractor.getDislikeCount())\r\n                        .setSubscriberCount(extractor.getSubscriberCount())\r\n                        .setCategory(extractor.getCategory())\r\n                        .setTags(extractor.getTags())\r\n                        .setFeedUrl(extractor.getFeedUrl())\r\n                        .setRelatedItems(extractor.getRelatedItems());\r\n\r\n                return builder.build();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Lấy danh sách các luồng video cần thiết để phát video ngay lập tức.\r\n     *\r\n     * @param url URL của video YouTube\r\n     * @return Danh sách các luồng video\r\n     * @throws ExtractionException nếu có lỗi khi trích xuất dữ liệu\r\n     * @throws IOException        nếu có lỗi khi tải dữ liệu\r\n     */\r\n    public static List<VideoStream> getEssentialVideoStreams(final String url)\r\n            throws ExtractionException, IOException {\r\n        final LinkHandlerFactory factory = ServiceList.YouTubeTwoPhase.getStreamLHFactory();\r\n        final LinkHandler linkHandler = factory.fromUrl(url);\r\n        final YoutubeStreamExtractorTwoPhase extractor =\r\n                (YoutubeStreamExtractorTwoPhase) ServiceList.YouTubeTwoPhase.getStreamExtractor(linkHandler);\r\n\r\n        // Tải dữ liệu cần thiết\r\n        extractor.fetchEssentialData(NewPipe.getDownloader());\r\n\r\n        // Lấy danh sách các luồng video\r\n        return extractor.getEssentialVideoStreams();\r\n    }\r\n\r\n    /**\r\n     * Lấy danh sách các luồng âm thanh cần thiết để phát video ngay lập tức.\r\n     *\r\n     * @param url URL của video YouTube\r\n     * @return Danh sách các luồng âm thanh\r\n     * @throws ExtractionException nếu có lỗi khi trích xuất dữ liệu\r\n     * @throws IOException        nếu có lỗi khi tải dữ liệu\r\n     */\r\n    public static List<AudioStream> getEssentialAudioStreams(final String url)\r\n            throws ExtractionException, IOException {\r\n        final LinkHandlerFactory factory = ServiceList.YouTubeTwoPhase.getStreamLHFactory();\r\n        final LinkHandler linkHandler = factory.fromUrl(url);\r\n        final YoutubeStreamExtractorTwoPhase extractor =\r\n                (YoutubeStreamExtractorTwoPhase) ServiceList.YouTubeTwoPhase.getStreamExtractor(linkHandler);\r\n\r\n        // Tải dữ liệu cần thiết\r\n        extractor.fetchEssentialData(NewPipe.getDownloader());\r\n\r\n        // Lấy danh sách các luồng âm thanh\r\n        return extractor.getEssentialAudioStreams();\r\n    }\r\n} "
        }
    ]
}