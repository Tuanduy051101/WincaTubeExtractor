{
    "sourceFile": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1741943544447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1741943544447,
            "name": "Commit-0",
            "content": "package org.schabi.newpipe.extractor.services.youtube;\r\n\r\nimport static org.schabi.newpipe.extractor.StreamingService.ServiceInfo.MediaCapability.AUDIO;\r\nimport static org.schabi.newpipe.extractor.StreamingService.ServiceInfo.MediaCapability.COMMENTS;\r\nimport static org.schabi.newpipe.extractor.StreamingService.ServiceInfo.MediaCapability.LIVE;\r\nimport static org.schabi.newpipe.extractor.StreamingService.ServiceInfo.MediaCapability.VIDEO;\r\nimport static java.util.Arrays.asList;\r\n\r\nimport org.schabi.newpipe.extractor.StreamingService;\r\nimport org.schabi.newpipe.extractor.channel.ChannelExtractor;\r\nimport org.schabi.newpipe.extractor.channel.tabs.ChannelTabExtractor;\r\nimport org.schabi.newpipe.extractor.comments.CommentsExtractor;\r\nimport org.schabi.newpipe.extractor.exceptions.ExtractionException;\r\nimport org.schabi.newpipe.extractor.feed.FeedExtractor;\r\nimport org.schabi.newpipe.extractor.kiosk.KioskList;\r\nimport org.schabi.newpipe.extractor.linkhandler.LinkHandler;\r\nimport org.schabi.newpipe.extractor.linkhandler.LinkHandlerFactory;\r\nimport org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\r\nimport org.schabi.newpipe.extractor.linkhandler.ListLinkHandlerFactory;\r\nimport org.schabi.newpipe.extractor.linkhandler.ReadyChannelTabListLinkHandler;\r\nimport org.schabi.newpipe.extractor.linkhandler.SearchQueryHandler;\r\nimport org.schabi.newpipe.extractor.linkhandler.SearchQueryHandlerFactory;\r\nimport org.schabi.newpipe.extractor.localization.ContentCountry;\r\nimport org.schabi.newpipe.extractor.localization.Localization;\r\nimport org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\r\nimport org.schabi.newpipe.extractor.search.SearchExtractor;\r\nimport org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeChannelExtractor;\r\nimport org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeChannelTabExtractor;\r\nimport org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeCommentsExtractor;\r\nimport org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeFeedExtractor;\r\nimport org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeMixPlaylistExtractor;\r\nimport org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeMusicSearchExtractor;\r\nimport org.schabi.newpipe.extractor.services.youtube.extractors.YoutubePlaylistExtractor;\r\nimport org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeSearchExtractor;\r\nimport org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeStreamExtractor;\r\nimport org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeStreamExtractorTwoPhase;\r\nimport org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeSubscriptionExtractor;\r\nimport org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeSuggestionExtractor;\r\nimport org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeTrendingExtractor;\r\nimport org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeChannelLinkHandlerFactory;\r\nimport org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeChannelTabLinkHandlerFactory;\r\nimport org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeCommentsLinkHandlerFactory;\r\nimport org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubePlaylistLinkHandlerFactory;\r\nimport org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeSearchQueryHandlerFactory;\r\nimport org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeStreamLinkHandlerFactory;\r\nimport org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeTrendingLinkHandlerFactory;\r\nimport org.schabi.newpipe.extractor.stream.StreamExtractor;\r\nimport org.schabi.newpipe.extractor.subscription.SubscriptionExtractor;\r\nimport org.schabi.newpipe.extractor.suggestion.SuggestionExtractor;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.annotation.Nonnull;\r\n\r\n/*\r\n * Created by Christian Schabesberger on 23.08.15.\r\n *\r\n * Copyright (C) 2018 Christian Schabesberger <chris.schabesberger@mailbox.org>\r\n * YoutubeService.java is part of NewPipe Extractor.\r\n *\r\n * NewPipe Extractor is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * NewPipe Extractor is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with NewPipe Extractor.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\npublic class YoutubeService extends StreamingService {\r\n\r\n    public YoutubeService(final int id) {\r\n        super(id, \"YouTube\", asList(AUDIO, VIDEO, LIVE, COMMENTS));\r\n    }\r\n\r\n    @Override\r\n    public String getBaseUrl() {\r\n        return \"https://youtube.com\";\r\n    }\r\n\r\n    @Override\r\n    public LinkHandlerFactory getStreamLHFactory() {\r\n        return YoutubeStreamLinkHandlerFactory.getInstance();\r\n    }\r\n\r\n    @Override\r\n    public ListLinkHandlerFactory getChannelLHFactory() {\r\n        return YoutubeChannelLinkHandlerFactory.getInstance();\r\n    }\r\n\r\n    @Override\r\n    public ListLinkHandlerFactory getChannelTabLHFactory() {\r\n        return YoutubeChannelTabLinkHandlerFactory.getInstance();\r\n    }\r\n\r\n    @Override\r\n    public ListLinkHandlerFactory getPlaylistLHFactory() {\r\n        return YoutubePlaylistLinkHandlerFactory.getInstance();\r\n    }\r\n\r\n    @Override\r\n    public SearchQueryHandlerFactory getSearchQHFactory() {\r\n        return YoutubeSearchQueryHandlerFactory.getInstance();\r\n    }\r\n\r\n    @Override\r\n    public StreamExtractor getStreamExtractor(final LinkHandler linkHandler) {\r\n        return new YoutubeStreamExtractor(this, linkHandler);\r\n    }\r\n\r\n    /**\r\n     * Tạo một YoutubeStreamExtractorTwoPhase mới với khả năng tải 2 giai đoạn\r\n     * @param linkHandler LinkHandler chứa URL của video\r\n     * @return YoutubeStreamExtractorTwoPhase mới\r\n     */\r\n    public YoutubeStreamExtractorTwoPhase getStreamExtractorTwoPhase(final LinkHandler linkHandler) {\r\n        return new YoutubeStreamExtractorTwoPhase(this, linkHandler);\r\n    }\r\n\r\n    @Override\r\n    public ChannelExtractor getChannelExtractor(final ListLinkHandler linkHandler) {\r\n        return new YoutubeChannelExtractor(this, linkHandler);\r\n    }\r\n\r\n    @Override\r\n    public ChannelTabExtractor getChannelTabExtractor(final ListLinkHandler linkHandler) {\r\n        if (linkHandler instanceof ReadyChannelTabListLinkHandler) {\r\n            return ((ReadyChannelTabListLinkHandler) linkHandler).getChannelTabExtractor(this);\r\n        } else {\r\n            return new YoutubeChannelTabExtractor(this, linkHandler);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public PlaylistExtractor getPlaylistExtractor(final ListLinkHandler linkHandler) {\r\n        if (YoutubeParsingHelper.isYoutubeMixId(linkHandler.getId())) {\r\n            return new YoutubeMixPlaylistExtractor(this, linkHandler);\r\n        } else {\r\n            return new YoutubePlaylistExtractor(this, linkHandler);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public SearchExtractor getSearchExtractor(final SearchQueryHandler query) {\r\n        final List<String> contentFilters = query.getContentFilters();\r\n\r\n        if (!contentFilters.isEmpty() && contentFilters.get(0).startsWith(\"music_\")) {\r\n            return new YoutubeMusicSearchExtractor(this, query);\r\n        } else {\r\n            return new YoutubeSearchExtractor(this, query);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public SuggestionExtractor getSuggestionExtractor() {\r\n        return new YoutubeSuggestionExtractor(this);\r\n    }\r\n\r\n    @Override\r\n    public KioskList getKioskList() throws ExtractionException {\r\n        final KioskList list = new KioskList(this);\r\n        final ListLinkHandlerFactory h = YoutubeTrendingLinkHandlerFactory.getInstance();\r\n\r\n        // add kiosks here e.g.:\r\n        try {\r\n            list.addKioskEntry(\r\n                    (streamingService, url, id) -> new YoutubeTrendingExtractor(\r\n                            YoutubeService.this,\r\n                            h.fromUrl(url),\r\n                            id\r\n                    ),\r\n                    h,\r\n                    YoutubeTrendingExtractor.KIOSK_ID\r\n            );\r\n            list.setDefaultKiosk(YoutubeTrendingExtractor.KIOSK_ID);\r\n        } catch (final Exception e) {\r\n            throw new ExtractionException(e);\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    @Override\r\n    public SubscriptionExtractor getSubscriptionExtractor() {\r\n        return new YoutubeSubscriptionExtractor(this);\r\n    }\r\n\r\n    @Nonnull\r\n    @Override\r\n    public FeedExtractor getFeedExtractor(final String channelUrl) throws ExtractionException {\r\n        return new YoutubeFeedExtractor(this, getChannelLHFactory().fromUrl(channelUrl));\r\n    }\r\n\r\n    @Override\r\n    public ListLinkHandlerFactory getCommentsLHFactory() {\r\n        return YoutubeCommentsLinkHandlerFactory.getInstance();\r\n    }\r\n\r\n    @Override\r\n    public CommentsExtractor getCommentsExtractor(final ListLinkHandler urlIdHandler)\r\n            throws ExtractionException {\r\n        return new YoutubeCommentsExtractor(this, urlIdHandler);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////////////////\r\n    // Localization\r\n    //////////////////////////////////////////////////////////////////////////*/\r\n\r\n    // https://www.youtube.com/picker_ajax?action_language_json=1\r\n    private static final List<Localization> SUPPORTED_LANGUAGES = Localization.listFrom(\r\n            \"en-GB\"\r\n            /*\"af\", \"am\", \"ar\", \"az\", \"be\", \"bg\", \"bn\", \"bs\", \"ca\", \"cs\", \"da\", \"de\",\r\n            \"el\", \"en\", \"en-GB\", \"es\", \"es-419\", \"es-US\", \"et\", \"eu\", \"fa\", \"fi\", \"fil\", \"fr\",\r\n            \"fr-CA\", \"gl\", \"gu\", \"hi\", \"hr\", \"hu\", \"hy\", \"id\", \"is\", \"it\", \"iw\", \"ja\",\r\n            \"ka\", \"kk\", \"km\", \"kn\", \"ko\", \"ky\", \"lo\", \"lt\", \"lv\", \"mk\", \"ml\", \"mn\",\r\n            \"mr\", \"ms\", \"my\", \"ne\", \"nl\", \"no\", \"pa\", \"pl\", \"pt\", \"pt-PT\", \"ro\", \"ru\",\r\n            \"si\", \"sk\", \"sl\", \"sq\", \"sr\", \"sr-Latn\", \"sv\", \"sw\", \"ta\", \"te\", \"th\", \"tr\",\r\n            \"uk\", \"ur\", \"uz\", \"vi\", \"zh-CN\", \"zh-HK\", \"zh-TW\", \"zu\"*/\r\n    );\r\n\r\n    // https://www.youtube.com/picker_ajax?action_country_json=1\r\n    private static final List<ContentCountry> SUPPORTED_COUNTRIES = ContentCountry.listFrom(\r\n            \"DZ\", \"AR\", \"AU\", \"AT\", \"AZ\", \"BH\", \"BD\", \"BY\", \"BE\", \"BO\", \"BA\", \"BR\", \"BG\", \"KH\",\r\n            \"CA\", \"CL\", \"CO\", \"CR\", \"HR\", \"CY\", \"CZ\", \"DK\", \"DO\", \"EC\", \"EG\", \"SV\", \"EE\", \"FI\",\r\n            \"FR\", \"GE\", \"DE\", \"GH\", \"GR\", \"GT\", \"HN\", \"HK\", \"HU\", \"IS\", \"IN\", \"ID\", \"IQ\", \"IE\",\r\n            \"IL\", \"IT\", \"JM\", \"JP\", \"JO\", \"KZ\", \"KE\", \"KW\", \"LA\", \"LV\", \"LB\", \"LY\", \"LI\", \"LT\",\r\n            \"LU\", \"MY\", \"MT\", \"MX\", \"ME\", \"MA\", \"NP\", \"NL\", \"NZ\", \"NI\", \"NG\", \"MK\", \"NO\", \"OM\",\r\n            \"PK\", \"PA\", \"PG\", \"PY\", \"PE\", \"PH\", \"PL\", \"PT\", \"PR\", \"QA\", \"RO\", \"RU\", \"SA\", \"SN\",\r\n            \"RS\", \"SG\", \"SK\", \"SI\", \"ZA\", \"KR\", \"ES\", \"LK\", \"SE\", \"CH\", \"TW\", \"TZ\", \"TH\", \"TN\",\r\n            \"TR\", \"UG\", \"UA\", \"AE\", \"GB\", \"US\", \"UY\", \"VE\", \"VN\", \"YE\", \"ZW\"\r\n    );\r\n\r\n    @Override\r\n    public List<Localization> getSupportedLocalizations() {\r\n        return SUPPORTED_LANGUAGES;\r\n    }\r\n\r\n    @Override\r\n    public List<ContentCountry> getSupportedCountries() {\r\n        return SUPPORTED_COUNTRIES;\r\n    }\r\n}\r\n"
        }
    ]
}