{
    "sourceFile": "extractor/src/main/java/org/schabi/newpipe/extractor/ServiceList.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1741940615826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741941606134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,63 +1,59 @@\n-package org.schabi.newpipe.extractor;\r\n-\r\n-import org.schabi.newpipe.extractor.services.bandcamp.BandcampService;\r\n-import org.schabi.newpipe.extractor.services.media_ccc.MediaCCCService;\r\n-import org.schabi.newpipe.extractor.services.peertube.PeertubeService;\r\n-import org.schabi.newpipe.extractor.services.soundcloud.SoundcloudService;\r\n-import org.schabi.newpipe.extractor.services.youtube.YoutubeService;\r\n-import org.schabi.newpipe.extractor.services.youtube.YoutubeServiceTwoPhase;\r\n-\r\n-import java.util.List;\r\n-\r\n-/*\r\n- * Copyright (C) 2018 Christian Schabesberger <chris.schabesberger@mailbox.org>\r\n- * ServiceList.java is part of NewPipe Extractor.\r\n- *\r\n- * NewPipe Extractor is free software: you can redistribute it and/or modify\r\n- * it under the terms of the GNU General Public License as published by\r\n- * the Free Software Foundation, either version 3 of the License, or\r\n- * (at your option) any later version.\r\n- *\r\n- * NewPipe Extractor is distributed in the hope that it will be useful,\r\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n- * GNU General Public License for more details.\r\n- *\r\n- * You should have received a copy of the GNU General Public License\r\n- * along with NewPipe Extractor.  If not, see <http://www.gnu.org/licenses/>.\r\n- */\r\n-\r\n-/**\r\n- * A list of supported services.\r\n- */\r\n-@SuppressWarnings({\"ConstantName\", \"InnerAssignment\"}) // keep unusual names and inner assignments\r\n-public final class ServiceList {\r\n-    private ServiceList() {\r\n-        // no instance\r\n-    }\r\n-\r\n-    public static final YoutubeService YouTube = new YoutubeService(0);\r\n-    public static final SoundcloudService SoundCloud = new SoundcloudService(1);\r\n-    public static final MediaCCCService MediaCCC = new MediaCCCService(2);\r\n-    public static final PeertubeService PeerTube = new PeertubeService(3);\r\n-    public static final BandcampService Bandcamp = new BandcampService(4);\r\n-    \r\n-    // Thêm dịch vụ YouTube với cơ chế tải 2 giai đoạn\r\n-    public static final YoutubeServiceTwoPhase YouTubeTwoPhase = new YoutubeServiceTwoPhase(5);\r\n-\r\n-    /**\r\n-     * When creating a new service, put this service in the end of this list,\r\n-     * and give it the next free id.\r\n-     */\r\n-    private static final List<StreamingService> SERVICES = List.of(\r\n-            YouTube, SoundCloud, MediaCCC, PeerTube, Bandcamp, YouTubeTwoPhase);\r\n-\r\n-    /**\r\n-     * Get all the supported services.\r\n-     *\r\n-     * @return a unmodifiable list of all the supported services\r\n-     */\r\n-    public static List<StreamingService> all() {\r\n-        return SERVICES;\r\n-    }\r\n-}\r\n+package org.schabi.newpipe.extractor;\n+\n+import org.schabi.newpipe.extractor.services.bandcamp.BandcampService;\n+import org.schabi.newpipe.extractor.services.media_ccc.MediaCCCService;\n+import org.schabi.newpipe.extractor.services.peertube.PeertubeService;\n+import org.schabi.newpipe.extractor.services.soundcloud.SoundcloudService;\n+import org.schabi.newpipe.extractor.services.youtube.YoutubeService;\n+\n+import java.util.List;\n+\n+/*\n+ * Copyright (C) 2018 Christian Schabesberger <chris.schabesberger@mailbox.org>\n+ * ServiceList.java is part of NewPipe Extractor.\n+ *\n+ * NewPipe Extractor is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * NewPipe Extractor is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with NewPipe Extractor.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+/**\n+ * A list of supported services.\n+ */\n+@SuppressWarnings({\"ConstantName\", \"InnerAssignment\"}) // keep unusual names and inner assignments\n+public final class ServiceList {\n+    private ServiceList() {\n+        // no instance\n+    }\n+\n+    public static final YoutubeService YouTube = new YoutubeService(0);\n+    public static final SoundcloudService SoundCloud = new SoundcloudService(1);\n+    public static final MediaCCCService MediaCCC = new MediaCCCService(2);\n+    public static final PeertubeService PeerTube = new PeertubeService(3);\n+    public static final BandcampService Bandcamp = new BandcampService(4);\n+\n+    /**\n+     * When creating a new service, put this service in the end of this list,\n+     * and give it the next free id.\n+     */\n+    private static final List<StreamingService> SERVICES = List.of(\n+            YouTube, SoundCloud, MediaCCC, PeerTube, Bandcamp);\n+\n+    /**\n+     * Get all the supported services.\n+     *\n+     * @return a unmodifiable list of all the supported services\n+     */\n+    public static List<StreamingService> all() {\n+        return SERVICES;\n+    }\n+}\n"
                }
            ],
            "date": 1741940615826,
            "name": "Commit-0",
            "content": "package org.schabi.newpipe.extractor;\r\n\r\nimport org.schabi.newpipe.extractor.services.bandcamp.BandcampService;\r\nimport org.schabi.newpipe.extractor.services.media_ccc.MediaCCCService;\r\nimport org.schabi.newpipe.extractor.services.peertube.PeertubeService;\r\nimport org.schabi.newpipe.extractor.services.soundcloud.SoundcloudService;\r\nimport org.schabi.newpipe.extractor.services.youtube.YoutubeService;\r\nimport org.schabi.newpipe.extractor.services.youtube.YoutubeServiceTwoPhase;\r\n\r\nimport java.util.List;\r\n\r\n/*\r\n * Copyright (C) 2018 Christian Schabesberger <chris.schabesberger@mailbox.org>\r\n * ServiceList.java is part of NewPipe Extractor.\r\n *\r\n * NewPipe Extractor is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * NewPipe Extractor is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with NewPipe Extractor.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/**\r\n * A list of supported services.\r\n */\r\n@SuppressWarnings({\"ConstantName\", \"InnerAssignment\"}) // keep unusual names and inner assignments\r\npublic final class ServiceList {\r\n    private ServiceList() {\r\n        // no instance\r\n    }\r\n\r\n    public static final YoutubeService YouTube = new YoutubeService(0);\r\n    public static final SoundcloudService SoundCloud = new SoundcloudService(1);\r\n    public static final MediaCCCService MediaCCC = new MediaCCCService(2);\r\n    public static final PeertubeService PeerTube = new PeertubeService(3);\r\n    public static final BandcampService Bandcamp = new BandcampService(4);\r\n    \r\n    // Thêm dịch vụ YouTube với cơ chế tải 2 giai đoạn\r\n    public static final YoutubeServiceTwoPhase YouTubeTwoPhase = new YoutubeServiceTwoPhase(5);\r\n\r\n    /**\r\n     * When creating a new service, put this service in the end of this list,\r\n     * and give it the next free id.\r\n     */\r\n    private static final List<StreamingService> SERVICES = List.of(\r\n            YouTube, SoundCloud, MediaCCC, PeerTube, Bandcamp, YouTubeTwoPhase);\r\n\r\n    /**\r\n     * Get all the supported services.\r\n     *\r\n     * @return a unmodifiable list of all the supported services\r\n     */\r\n    public static List<StreamingService> all() {\r\n        return SERVICES;\r\n    }\r\n}\r\n"
        }
    ]
}