{
    "sourceFile": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/TwoPhaseLoadingDemo.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1741943580565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1741943580565,
            "name": "Commit-0",
            "content": "/*\r\n * Created by WincaTubeExtractor on 14.03.2024.\r\n *\r\n * Copyright (C) 2024 WincaTubeExtractor\r\n * TwoPhaseLoadingDemo.java is part of NewPipe Extractor.\r\n *\r\n * NewPipe Extractor is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * NewPipe Extractor is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with NewPipe Extractor. If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\npackage org.schabi.newpipe.extractor.services.youtube;\r\n\r\nimport org.schabi.newpipe.extractor.NewPipe;\r\nimport org.schabi.newpipe.extractor.exceptions.ExtractionException;\r\nimport org.schabi.newpipe.extractor.stream.StreamInfo;\r\n\r\nimport java.io.IOException;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.Future;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n/**\r\n * Lớp demo minh họa cách sử dụng cơ chế tải 2 giai đoạn\r\n */\r\npublic class TwoPhaseLoadingDemo {\r\n\r\n    /**\r\n     * Phương thức main để chạy demo\r\n     * @param args Tham số dòng lệnh\r\n     */\r\n    public static void main(String[] args) {\r\n        // URL video YouTube để thử nghiệm\r\n        final String videoUrl = \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\";\r\n        \r\n        // Tạo ExecutorService để thực hiện tải dữ liệu bất đồng bộ\r\n        final ExecutorService executorService = Executors.newSingleThreadExecutor();\r\n        \r\n        try {\r\n            System.out.println(\"=== Demo cơ chế tải 2 giai đoạn ===\");\r\n            \r\n            // Giai đoạn 1: Tải thông tin cần thiết để phát video ngay lập tức\r\n            System.out.println(\"\\n=== Giai đoạn 1: Tải thông tin cần thiết ===\");\r\n            final long startTime1 = System.currentTimeMillis();\r\n            \r\n            final StreamInfo essentialInfo = YoutubeStreamExtractorHelper.getEssentialInfo(videoUrl);\r\n            \r\n            final long endTime1 = System.currentTimeMillis();\r\n            System.out.println(\"Thời gian tải giai đoạn 1: \" + (endTime1 - startTime1) + \"ms\");\r\n            \r\n            // In thông tin cần thiết\r\n            System.out.println(\"Tiêu đề: \" + essentialInfo.getName());\r\n            System.out.println(\"Người tải lên: \" + essentialInfo.getUploaderName());\r\n            System.out.println(\"Thời lượng: \" + formatDuration(essentialInfo.getDuration()));\r\n            System.out.println(\"Số luồng video: \" + essentialInfo.getVideoStreams().size());\r\n            System.out.println(\"Số luồng âm thanh: \" + essentialInfo.getAudioStreams().size());\r\n            \r\n            // Giả lập việc bắt đầu phát video\r\n            System.out.println(\"\\n=== Bắt đầu phát video ===\");\r\n            System.out.println(\"Video đang phát...\");\r\n            \r\n            // Giai đoạn 2: Tải thông tin bổ sung dưới nền\r\n            System.out.println(\"\\n=== Giai đoạn 2: Tải thông tin bổ sung dưới nền ===\");\r\n            final long startTime2 = System.currentTimeMillis();\r\n            \r\n            final Future<StreamInfo> additionalInfoFuture = \r\n                    YoutubeStreamExtractorHelper.getAdditionalInfoAsync(videoUrl, executorService);\r\n            \r\n            // Giả lập việc phát video trong khi tải thông tin bổ sung\r\n            System.out.println(\"Video tiếp tục phát trong khi tải thông tin bổ sung...\");\r\n            \r\n            // Đợi thông tin bổ sung được tải xong\r\n            final StreamInfo fullInfo = additionalInfoFuture.get();\r\n            \r\n            final long endTime2 = System.currentTimeMillis();\r\n            System.out.println(\"Thời gian tải giai đoạn 2: \" + (endTime2 - startTime2) + \"ms\");\r\n            \r\n            // In thông tin bổ sung\r\n            System.out.println(\"\\n=== Thông tin bổ sung ===\");\r\n            System.out.println(\"Mô tả: \" + (fullInfo.getDescription() != null \r\n                    ? fullInfo.getDescription().getContent().substring(0, 100) + \"...\" \r\n                    : \"Không có\"));\r\n            System.out.println(\"Lượt xem: \" + formatViewCount(fullInfo.getViewCount()));\r\n            System.out.println(\"Lượt thích: \" + formatLikeCount(fullInfo.getLikeCount()));\r\n            System.out.println(\"Ngày tải lên: \" + fullInfo.getTextualUploadDate());\r\n            System.out.println(\"Danh mục: \" + fullInfo.getCategory());\r\n            System.out.println(\"Số video liên quan: \" + \r\n                    (fullInfo.getRelatedItems() != null ? fullInfo.getRelatedItems().size() : 0));\r\n            \r\n        } catch (ExtractionException | IOException | InterruptedException | ExecutionException e) {\r\n            System.err.println(\"Lỗi: \" + e.getMessage());\r\n            e.printStackTrace();\r\n        } finally {\r\n            // Đóng ExecutorService\r\n            executorService.shutdown();\r\n            try {\r\n                if (!executorService.awaitTermination(5, TimeUnit.SECONDS)) {\r\n                    executorService.shutdownNow();\r\n                }\r\n            } catch (InterruptedException e) {\r\n                executorService.shutdownNow();\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Định dạng thời lượng video\r\n     * @param durationSeconds Thời lượng tính bằng giây\r\n     * @return Chuỗi định dạng thời lượng\r\n     */\r\n    private static String formatDuration(long durationSeconds) {\r\n        if (durationSeconds <= 0) {\r\n            return \"Không xác định\";\r\n        }\r\n        \r\n        final long hours = durationSeconds / 3600;\r\n        final long minutes = (durationSeconds % 3600) / 60;\r\n        final long seconds = durationSeconds % 60;\r\n        \r\n        if (hours > 0) {\r\n            return String.format(\"%d:%02d:%02d\", hours, minutes, seconds);\r\n        } else {\r\n            return String.format(\"%d:%02d\", minutes, seconds);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Định dạng số lượt xem\r\n     * @param viewCount Số lượt xem\r\n     * @return Chuỗi định dạng số lượt xem\r\n     */\r\n    private static String formatViewCount(long viewCount) {\r\n        if (viewCount <= 0) {\r\n            return \"Không xác định\";\r\n        }\r\n        \r\n        if (viewCount < 1000) {\r\n            return String.valueOf(viewCount);\r\n        } else if (viewCount < 1000000) {\r\n            return String.format(\"%.1fK\", viewCount / 1000.0);\r\n        } else if (viewCount < 1000000000) {\r\n            return String.format(\"%.1fM\", viewCount / 1000000.0);\r\n        } else {\r\n            return String.format(\"%.1fB\", viewCount / 1000000000.0);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Định dạng số lượt thích\r\n     * @param likeCount Số lượt thích\r\n     * @return Chuỗi định dạng số lượt thích\r\n     */\r\n    private static String formatLikeCount(long likeCount) {\r\n        if (likeCount <= 0) {\r\n            return \"Không xác định\";\r\n        }\r\n        \r\n        if (likeCount < 1000) {\r\n            return String.valueOf(likeCount);\r\n        } else if (likeCount < 1000000) {\r\n            return String.format(\"%.1fK\", likeCount / 1000.0);\r\n        } else if (likeCount < 1000000000) {\r\n            return String.format(\"%.1fM\", likeCount / 1000000.0);\r\n        } else {\r\n            return String.format(\"%.1fB\", likeCount / 1000000000.0);\r\n        }\r\n    }\r\n} "
        }
    ]
}