{
    "sourceFile": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamInfoTwoPhase.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1741942850676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741943323645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,216 +1,1 @@\n-/*\r\n- * Created by WincaTubeExtractor on 14.03.2024.\r\n- *\r\n- * Copyright (C) 2024 WincaTubeExtractor\r\n- * StreamInfoTwoPhase.java is part of NewPipe Extractor.\r\n- *\r\n- * NewPipe Extractor is free software: you can redistribute it and/or modify\r\n- * it under the terms of the GNU General Public License as published by\r\n- * the Free Software Foundation, either version 3 of the License, or\r\n- * (at your option) any later version.\r\n- *\r\n- * NewPipe Extractor is distributed in the hope that it will be useful,\r\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n- * GNU General Public License for more details.\r\n- *\r\n- * You should have received a copy of the GNU General Public License\r\n- * along with NewPipe Extractor. If not, see <https://www.gnu.org/licenses/>.\r\n- */\r\n-\r\n-package org.schabi.newpipe.extractor.stream;\r\n-\r\n-import org.schabi.newpipe.extractor.Info;\r\n-import org.schabi.newpipe.extractor.NewPipe;\r\n-import org.schabi.newpipe.extractor.StreamingService;\r\n-import org.schabi.newpipe.extractor.exceptions.ContentNotAvailableException;\r\n-import org.schabi.newpipe.extractor.exceptions.ExtractionException;\r\n-import org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeStreamExtractorTwoPhase;\r\n-\r\n-import java.io.IOException;\r\n-\r\n-import javax.annotation.Nonnull;\r\n-\r\n-/**\r\n- * Lớp thông tin cho nội dung đã mở, tức là nội dung sẵn sàng để phát,\r\n- * với cơ chế tải 2 giai đoạn.\r\n- */\r\n-public class StreamInfoTwoPhase extends StreamInfo {\r\n-\r\n-    private final YoutubeStreamExtractorTwoPhase extractor;\r\n-    private boolean additionalDataLoaded = false;\r\n-\r\n-    private StreamInfoTwoPhase(final int serviceId,\r\n-                              final String url,\r\n-                              final String originalUrl,\r\n-                              final StreamType streamType,\r\n-                              final String id,\r\n-                              final String name,\r\n-                              final int ageLimit,\r\n-                              final YoutubeStreamExtractorTwoPhase extractor) {\r\n-        super(serviceId, url, originalUrl, streamType, id, name, ageLimit);\r\n-        this.extractor = extractor;\r\n-    }\r\n-\r\n-    /**\r\n-     * Lấy thông tin stream với cơ chế tải 2 giai đoạn.\r\n-     * Phương thức này chỉ tải dữ liệu cần thiết để phát video ngay lập tức.\r\n-     *\r\n-     * @param url URL của video\r\n-     * @return Đối tượng StreamInfoTwoPhase chứa thông tin cần thiết để phát video\r\n-     * @throws IOException nếu có lỗi khi tải dữ liệu\r\n-     * @throws ExtractionException nếu có lỗi khi trích xuất dữ liệu\r\n-     */\r\n-    public static StreamInfoTwoPhase getInfo(final String url) throws IOException, ExtractionException {\r\n-        return getInfo(NewPipe.getServiceByUrl(url), url);\r\n-    }\r\n-\r\n-    /**\r\n-     * Lấy thông tin stream với cơ chế tải 2 giai đoạn.\r\n-     * Phương thức này chỉ tải dữ liệu cần thiết để phát video ngay lập tức.\r\n-     *\r\n-     * @param service Dịch vụ phát trực tuyến\r\n-     * @param url URL của video\r\n-     * @return Đối tượng StreamInfoTwoPhase chứa thông tin cần thiết để phát video\r\n-     * @throws IOException nếu có lỗi khi tải dữ liệu\r\n-     * @throws ExtractionException nếu có lỗi khi trích xuất dữ liệu\r\n-     */\r\n-    public static StreamInfoTwoPhase getInfo(@Nonnull final StreamingService service,\r\n-                                           final String url) throws IOException, ExtractionException {\r\n-        final YoutubeStreamExtractorTwoPhase extractor = \r\n-                (YoutubeStreamExtractorTwoPhase) service.getStreamExtractor(url);\r\n-        return getInfo(extractor);\r\n-    }\r\n-\r\n-    /**\r\n-     * Lấy thông tin stream với cơ chế tải 2 giai đoạn.\r\n-     * Phương thức này chỉ tải dữ liệu cần thiết để phát video ngay lập tức.\r\n-     *\r\n-     * @param extractor Trình trích xuất stream\r\n-     * @return Đối tượng StreamInfoTwoPhase chứa thông tin cần thiết để phát video\r\n-     * @throws ExtractionException nếu có lỗi khi trích xuất dữ liệu\r\n-     * @throws IOException nếu có lỗi khi tải dữ liệu\r\n-     */\r\n-    public static StreamInfoTwoPhase getInfo(@Nonnull final YoutubeStreamExtractorTwoPhase extractor)\r\n-            throws ExtractionException, IOException {\r\n-        // Tải dữ liệu cần thiết (giai đoạn 1)\r\n-        extractor.fetchEssentialData(NewPipe.getDownloader());\r\n-        \r\n-        final StreamInfoTwoPhase streamInfo;\r\n-        try {\r\n-            // Trích xuất dữ liệu quan trọng\r\n-            streamInfo = extractImportantData(extractor);\r\n-            \r\n-            // Trích xuất các luồng video và âm thanh\r\n-            extractStreams(streamInfo, extractor);\r\n-            \r\n-            return streamInfo;\r\n-        } catch (final ExtractionException e) {\r\n-            final String errorMessage = extractor.getErrorMessage();\r\n-            if (errorMessage == null || errorMessage.isEmpty()) {\r\n-                throw e;\r\n-            } else {\r\n-                throw new ContentNotAvailableException(errorMessage, e);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Tải dữ liệu bổ sung (giai đoạn 2).\r\n-     * Phương thức này nên được gọi sau khi video đã bắt đầu phát.\r\n-     *\r\n-     * @throws IOException nếu có lỗi khi tải dữ liệu\r\n-     * @throws ExtractionException nếu có lỗi khi trích xuất dữ liệu\r\n-     */\r\n-    public void loadAdditionalData() throws IOException, ExtractionException {\r\n-        if (additionalDataLoaded) {\r\n-            return;\r\n-        }\r\n-        \r\n-        // Tải dữ liệu bổ sung (giai đoạn 2)\r\n-        extractor.fetchAdditionalData(NewPipe.getDownloader());\r\n-        \r\n-        // Trích xuất dữ liệu bổ sung\r\n-        extractOptionalData(this, extractor);\r\n-        \r\n-        additionalDataLoaded = true;\r\n-    }\r\n-\r\n-    /**\r\n-     * Kiểm tra xem dữ liệu bổ sung đã được tải hay chưa.\r\n-     *\r\n-     * @return true nếu dữ liệu bổ sung đã được tải, false nếu chưa\r\n-     */\r\n-    public boolean isAdditionalDataLoaded() {\r\n-        return additionalDataLoaded;\r\n-    }\r\n-\r\n-    @Nonnull\r\n-    private static StreamInfoTwoPhase extractImportantData(@Nonnull final YoutubeStreamExtractorTwoPhase extractor)\r\n-            throws ExtractionException {\r\n-        // Dữ liệu quan trọng, không có nó nội dung không thể hiển thị.\r\n-        // Nếu một trong những dữ liệu này không có sẵn, frontend sẽ nhận được một ngoại lệ trực tiếp.\r\n-\r\n-        final String url = extractor.getUrl();\r\n-        final StreamType streamType = extractor.getStreamType();\r\n-        final String id = extractor.getId();\r\n-        final String name = extractor.getName();\r\n-        final int ageLimit = extractor.getAgeLimit();\r\n-\r\n-        if (streamType == StreamType.NONE\r\n-                || url == null || url.isEmpty()\r\n-                || id == null || id.isEmpty()\r\n-                || name == null /* nhưng nó có thể trống */\r\n-                || ageLimit == -1) {\r\n-            throw new ExtractionException(\"Một số thông tin stream quan trọng không được cung cấp.\");\r\n-        }\r\n-\r\n-        return new StreamInfoTwoPhase(extractor.getServiceId(), url, extractor.getOriginalUrl(),\r\n-                streamType, id, name, ageLimit, extractor);\r\n-    }\r\n-\r\n-    private static void extractStreams(final StreamInfoTwoPhase streamInfo,\r\n-                                      final YoutubeStreamExtractorTwoPhase extractor)\r\n-            throws ExtractionException {\r\n-        /* ---- Trích xuất stream diễn ra ở đây ---- */\r\n-        // Ít nhất một loại stream phải có sẵn, nếu không một ngoại lệ sẽ được ném\r\n-        // trực tiếp vào frontend.\r\n-\r\n-        try {\r\n-            streamInfo.setDashMpdUrl(extractor.getDashMpdUrl());\r\n-        } catch (final Exception e) {\r\n-            streamInfo.addError(new ExtractionException(\"Không thể lấy DASH manifest\", e));\r\n-        }\r\n-\r\n-        try {\r\n-            streamInfo.setHlsUrl(extractor.getHlsUrl());\r\n-        } catch (final Exception e) {\r\n-            streamInfo.addError(new ExtractionException(\"Không thể lấy HLS manifest\", e));\r\n-        }\r\n-\r\n-        try {\r\n-            streamInfo.setAudioStreams(extractor.getEssentialAudioStreams());\r\n-        } catch (final Exception e) {\r\n-            streamInfo.addError(new ExtractionException(\"Không thể lấy luồng âm thanh\", e));\r\n-        }\r\n-\r\n-        try {\r\n-            streamInfo.setVideoStreams(extractor.getEssentialVideoStreams());\r\n-        } catch (final Exception e) {\r\n-            streamInfo.addError(new ExtractionException(\"Không thể lấy luồng video\", e));\r\n-        }\r\n-\r\n-        try {\r\n-            streamInfo.setVideoOnlyStreams(extractor.getVideoOnlyStreams());\r\n-        } catch (final Exception e) {\r\n-            streamInfo.addError(new ExtractionException(\"Không thể lấy luồng chỉ có video\", e));\r\n-        }\r\n-\r\n-        // Hoặc âm thanh hoặc video phải có sẵn, nếu không chúng ta không có stream\r\n-        // (vì videoOnly là tùy chọn, chúng không được tính).\r\n-        if ((streamInfo.videoStreams.isEmpty()) && (streamInfo.audioStreams.isEmpty())) {\r\n-            throw new StreamExtractor.StreamExtractException(\r\n-                    \"Không thể lấy bất kỳ stream nào. Xem biến lỗi để biết thêm chi tiết.\");\r\n-        }\r\n-    }\r\n-} \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1741942850676,
            "name": "Commit-0",
            "content": "/*\r\n * Created by WincaTubeExtractor on 14.03.2024.\r\n *\r\n * Copyright (C) 2024 WincaTubeExtractor\r\n * StreamInfoTwoPhase.java is part of NewPipe Extractor.\r\n *\r\n * NewPipe Extractor is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * NewPipe Extractor is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with NewPipe Extractor. If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\npackage org.schabi.newpipe.extractor.stream;\r\n\r\nimport org.schabi.newpipe.extractor.Info;\r\nimport org.schabi.newpipe.extractor.NewPipe;\r\nimport org.schabi.newpipe.extractor.StreamingService;\r\nimport org.schabi.newpipe.extractor.exceptions.ContentNotAvailableException;\r\nimport org.schabi.newpipe.extractor.exceptions.ExtractionException;\r\nimport org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeStreamExtractorTwoPhase;\r\n\r\nimport java.io.IOException;\r\n\r\nimport javax.annotation.Nonnull;\r\n\r\n/**\r\n * Lớp thông tin cho nội dung đã mở, tức là nội dung sẵn sàng để phát,\r\n * với cơ chế tải 2 giai đoạn.\r\n */\r\npublic class StreamInfoTwoPhase extends StreamInfo {\r\n\r\n    private final YoutubeStreamExtractorTwoPhase extractor;\r\n    private boolean additionalDataLoaded = false;\r\n\r\n    private StreamInfoTwoPhase(final int serviceId,\r\n                              final String url,\r\n                              final String originalUrl,\r\n                              final StreamType streamType,\r\n                              final String id,\r\n                              final String name,\r\n                              final int ageLimit,\r\n                              final YoutubeStreamExtractorTwoPhase extractor) {\r\n        super(serviceId, url, originalUrl, streamType, id, name, ageLimit);\r\n        this.extractor = extractor;\r\n    }\r\n\r\n    /**\r\n     * Lấy thông tin stream với cơ chế tải 2 giai đoạn.\r\n     * Phương thức này chỉ tải dữ liệu cần thiết để phát video ngay lập tức.\r\n     *\r\n     * @param url URL của video\r\n     * @return Đối tượng StreamInfoTwoPhase chứa thông tin cần thiết để phát video\r\n     * @throws IOException nếu có lỗi khi tải dữ liệu\r\n     * @throws ExtractionException nếu có lỗi khi trích xuất dữ liệu\r\n     */\r\n    public static StreamInfoTwoPhase getInfo(final String url) throws IOException, ExtractionException {\r\n        return getInfo(NewPipe.getServiceByUrl(url), url);\r\n    }\r\n\r\n    /**\r\n     * Lấy thông tin stream với cơ chế tải 2 giai đoạn.\r\n     * Phương thức này chỉ tải dữ liệu cần thiết để phát video ngay lập tức.\r\n     *\r\n     * @param service Dịch vụ phát trực tuyến\r\n     * @param url URL của video\r\n     * @return Đối tượng StreamInfoTwoPhase chứa thông tin cần thiết để phát video\r\n     * @throws IOException nếu có lỗi khi tải dữ liệu\r\n     * @throws ExtractionException nếu có lỗi khi trích xuất dữ liệu\r\n     */\r\n    public static StreamInfoTwoPhase getInfo(@Nonnull final StreamingService service,\r\n                                           final String url) throws IOException, ExtractionException {\r\n        final YoutubeStreamExtractorTwoPhase extractor = \r\n                (YoutubeStreamExtractorTwoPhase) service.getStreamExtractor(url);\r\n        return getInfo(extractor);\r\n    }\r\n\r\n    /**\r\n     * Lấy thông tin stream với cơ chế tải 2 giai đoạn.\r\n     * Phương thức này chỉ tải dữ liệu cần thiết để phát video ngay lập tức.\r\n     *\r\n     * @param extractor Trình trích xuất stream\r\n     * @return Đối tượng StreamInfoTwoPhase chứa thông tin cần thiết để phát video\r\n     * @throws ExtractionException nếu có lỗi khi trích xuất dữ liệu\r\n     * @throws IOException nếu có lỗi khi tải dữ liệu\r\n     */\r\n    public static StreamInfoTwoPhase getInfo(@Nonnull final YoutubeStreamExtractorTwoPhase extractor)\r\n            throws ExtractionException, IOException {\r\n        // Tải dữ liệu cần thiết (giai đoạn 1)\r\n        extractor.fetchEssentialData(NewPipe.getDownloader());\r\n        \r\n        final StreamInfoTwoPhase streamInfo;\r\n        try {\r\n            // Trích xuất dữ liệu quan trọng\r\n            streamInfo = extractImportantData(extractor);\r\n            \r\n            // Trích xuất các luồng video và âm thanh\r\n            extractStreams(streamInfo, extractor);\r\n            \r\n            return streamInfo;\r\n        } catch (final ExtractionException e) {\r\n            final String errorMessage = extractor.getErrorMessage();\r\n            if (errorMessage == null || errorMessage.isEmpty()) {\r\n                throw e;\r\n            } else {\r\n                throw new ContentNotAvailableException(errorMessage, e);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tải dữ liệu bổ sung (giai đoạn 2).\r\n     * Phương thức này nên được gọi sau khi video đã bắt đầu phát.\r\n     *\r\n     * @throws IOException nếu có lỗi khi tải dữ liệu\r\n     * @throws ExtractionException nếu có lỗi khi trích xuất dữ liệu\r\n     */\r\n    public void loadAdditionalData() throws IOException, ExtractionException {\r\n        if (additionalDataLoaded) {\r\n            return;\r\n        }\r\n        \r\n        // Tải dữ liệu bổ sung (giai đoạn 2)\r\n        extractor.fetchAdditionalData(NewPipe.getDownloader());\r\n        \r\n        // Trích xuất dữ liệu bổ sung\r\n        extractOptionalData(this, extractor);\r\n        \r\n        additionalDataLoaded = true;\r\n    }\r\n\r\n    /**\r\n     * Kiểm tra xem dữ liệu bổ sung đã được tải hay chưa.\r\n     *\r\n     * @return true nếu dữ liệu bổ sung đã được tải, false nếu chưa\r\n     */\r\n    public boolean isAdditionalDataLoaded() {\r\n        return additionalDataLoaded;\r\n    }\r\n\r\n    @Nonnull\r\n    private static StreamInfoTwoPhase extractImportantData(@Nonnull final YoutubeStreamExtractorTwoPhase extractor)\r\n            throws ExtractionException {\r\n        // Dữ liệu quan trọng, không có nó nội dung không thể hiển thị.\r\n        // Nếu một trong những dữ liệu này không có sẵn, frontend sẽ nhận được một ngoại lệ trực tiếp.\r\n\r\n        final String url = extractor.getUrl();\r\n        final StreamType streamType = extractor.getStreamType();\r\n        final String id = extractor.getId();\r\n        final String name = extractor.getName();\r\n        final int ageLimit = extractor.getAgeLimit();\r\n\r\n        if (streamType == StreamType.NONE\r\n                || url == null || url.isEmpty()\r\n                || id == null || id.isEmpty()\r\n                || name == null /* nhưng nó có thể trống */\r\n                || ageLimit == -1) {\r\n            throw new ExtractionException(\"Một số thông tin stream quan trọng không được cung cấp.\");\r\n        }\r\n\r\n        return new StreamInfoTwoPhase(extractor.getServiceId(), url, extractor.getOriginalUrl(),\r\n                streamType, id, name, ageLimit, extractor);\r\n    }\r\n\r\n    private static void extractStreams(final StreamInfoTwoPhase streamInfo,\r\n                                      final YoutubeStreamExtractorTwoPhase extractor)\r\n            throws ExtractionException {\r\n        /* ---- Trích xuất stream diễn ra ở đây ---- */\r\n        // Ít nhất một loại stream phải có sẵn, nếu không một ngoại lệ sẽ được ném\r\n        // trực tiếp vào frontend.\r\n\r\n        try {\r\n            streamInfo.setDashMpdUrl(extractor.getDashMpdUrl());\r\n        } catch (final Exception e) {\r\n            streamInfo.addError(new ExtractionException(\"Không thể lấy DASH manifest\", e));\r\n        }\r\n\r\n        try {\r\n            streamInfo.setHlsUrl(extractor.getHlsUrl());\r\n        } catch (final Exception e) {\r\n            streamInfo.addError(new ExtractionException(\"Không thể lấy HLS manifest\", e));\r\n        }\r\n\r\n        try {\r\n            streamInfo.setAudioStreams(extractor.getEssentialAudioStreams());\r\n        } catch (final Exception e) {\r\n            streamInfo.addError(new ExtractionException(\"Không thể lấy luồng âm thanh\", e));\r\n        }\r\n\r\n        try {\r\n            streamInfo.setVideoStreams(extractor.getEssentialVideoStreams());\r\n        } catch (final Exception e) {\r\n            streamInfo.addError(new ExtractionException(\"Không thể lấy luồng video\", e));\r\n        }\r\n\r\n        try {\r\n            streamInfo.setVideoOnlyStreams(extractor.getVideoOnlyStreams());\r\n        } catch (final Exception e) {\r\n            streamInfo.addError(new ExtractionException(\"Không thể lấy luồng chỉ có video\", e));\r\n        }\r\n\r\n        // Hoặc âm thanh hoặc video phải có sẵn, nếu không chúng ta không có stream\r\n        // (vì videoOnly là tùy chọn, chúng không được tính).\r\n        if ((streamInfo.videoStreams.isEmpty()) && (streamInfo.audioStreams.isEmpty())) {\r\n            throw new StreamExtractor.StreamExtractException(\r\n                    \"Không thể lấy bất kỳ stream nào. Xem biến lỗi để biết thêm chi tiết.\");\r\n        }\r\n    }\r\n} "
        }
    ]
}