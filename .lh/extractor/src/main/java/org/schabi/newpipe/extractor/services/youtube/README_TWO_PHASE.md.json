{
    "sourceFile": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/README_TWO_PHASE.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1741940697467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741941442980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,8 @@\n     private VideoManager videoManager;\r\n     private VideoView videoView;\r\n     private TextView titleTextView;\r\n     private TextView descriptionTextView;\r\n-    private RecyclerView relatedVideosRecyclerView;\r\n     \r\n     @Override\r\n     protected void onCreate(Bundle savedInstanceState) {\r\n         super.onCreate(savedInstanceState);\r\n@@ -168,9 +167,8 @@\n         // Khởi tạo các view\r\n         videoView = findViewById(R.id.video_view);\r\n         titleTextView = findViewById(R.id.text_title);\r\n         descriptionTextView = findViewById(R.id.text_description);\r\n-        relatedVideosRecyclerView = findViewById(R.id.recycler_related_videos);\r\n         \r\n         // Khởi tạo VideoManager\r\n         videoManager = new VideoManager();\r\n         \r\n@@ -201,13 +199,9 @@\n     public void onAdditionalInfoLoaded(StreamInfo fullInfo) {\r\n         // Chạy trên UI thread\r\n         runOnUiThread(() -> {\r\n             // Cập nhật mô tả\r\n-            descriptionTextView.setText(fullInfo.getDescription().getContent());\r\n-            \r\n-            // Cập nhật danh sách video liên quan\r\n-            RelatedVideosAdapter adapter = new RelatedVideosAdapter(fullInfo.getRelatedItems());\r\n-            relatedVideosRecyclerView.setAdapter(adapter);\r\n+            descriptionTextView.setText(fullInfo.getDescription());\r\n         });\r\n     }\r\n     \r\n     @Override\r\n"
                },
                {
                    "date": 1741941606184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,227 +1,1 @@\n-# Hướng dẫn sử dụng cơ chế tải 2 giai đoạn\r\n-\r\n-Tài liệu này hướng dẫn cách sử dụng cơ chế tải 2 giai đoạn trong dự án WincaTubeExtractor để cải thiện trải nghiệm người dùng khi xem video YouTube.\r\n-\r\n-## Giới thiệu\r\n-\r\n-Cơ chế tải 2 giai đoạn cho phép ứng dụng tải các thông tin cần thiết để phát video ngay lập tức (URL phát, định dạng video/audio) trong giai đoạn 1, và tải các thông tin bổ sung dưới nền (mô tả, bình luận, video liên quan, v.v.) trong giai đoạn 2. Điều này giúp người dùng có thể xem video ngay lập tức sau khi nhấp vào, không phải đợi tải tất cả dữ liệu liên quan.\r\n-\r\n-## Các lớp chính\r\n-\r\n-1. `YoutubeStreamExtractorTwoPhase`: Lớp trích xuất hỗ trợ tải dữ liệu theo 2 giai đoạn.\r\n-2. `YoutubeServiceTwoPhase`: Lớp dịch vụ sử dụng `YoutubeStreamExtractorTwoPhase`.\r\n-3. `YoutubeStreamExtractorHelper`: Lớp tiện ích giúp ứng dụng Android sử dụng cơ chế tải 2 giai đoạn một cách dễ dàng.\r\n-\r\n-## Cách sử dụng trong ứng dụng Android\r\n-\r\n-### 1. Tải thông tin cần thiết để phát video ngay lập tức\r\n-\r\n-```java\r\n-// Trong một AsyncTask hoặc coroutine\r\n-try {\r\n-    // Lấy thông tin cần thiết để phát video\r\n-    StreamInfo streamInfo = YoutubeStreamExtractorHelper.getEssentialInfo(videoUrl);\r\n-    \r\n-    // Lấy URL phát tốt nhất\r\n-    String playbackUrl = streamInfo.getVideoStreams().get(0).getUrl();\r\n-    \r\n-    // Bắt đầu phát video\r\n-    playVideo(playbackUrl);\r\n-    \r\n-    // Cập nhật UI với thông tin cơ bản\r\n-    updateBasicInfo(streamInfo);\r\n-} catch (Exception e) {\r\n-    // Xử lý lỗi\r\n-    handleError(e);\r\n-}\r\n-```\r\n-\r\n-### 2. Tải thông tin bổ sung dưới nền\r\n-\r\n-```java\r\n-// Tạo một ExecutorService để chạy tác vụ dưới nền\r\n-ExecutorService executorService = Executors.newSingleThreadExecutor();\r\n-\r\n-// Tải thông tin bổ sung dưới nền\r\n-Future<StreamInfo> futureInfo = YoutubeStreamExtractorHelper.getAdditionalInfoAsync(\r\n-        videoUrl, executorService);\r\n-\r\n-// Xử lý kết quả khi tải xong\r\n-executorService.execute(() -> {\r\n-    try {\r\n-        // Đợi kết quả\r\n-        StreamInfo fullInfo = futureInfo.get();\r\n-        \r\n-        // Cập nhật UI với thông tin đầy đủ\r\n-        runOnUiThread(() -> {\r\n-            updateFullInfo(fullInfo);\r\n-        });\r\n-    } catch (Exception e) {\r\n-        // Xử lý lỗi\r\n-        runOnUiThread(() -> {\r\n-            handleAdditionalInfoError(e);\r\n-        });\r\n-    }\r\n-});\r\n-```\r\n-\r\n-### 3. Sử dụng trực tiếp các luồng video và âm thanh\r\n-\r\n-```java\r\n-// Lấy danh sách các luồng video\r\n-List<VideoStream> videoStreams = YoutubeStreamExtractorHelper.getEssentialVideoStreams(videoUrl);\r\n-\r\n-// Lấy danh sách các luồng âm thanh\r\n-List<AudioStream> audioStreams = YoutubeStreamExtractorHelper.getEssentialAudioStreams(videoUrl);\r\n-\r\n-// Chọn luồng video và âm thanh tốt nhất\r\n-VideoStream bestVideoStream = getBestVideoStream(videoStreams);\r\n-AudioStream bestAudioStream = getBestAudioStream(audioStreams);\r\n-\r\n-// Phát video với luồng video và âm thanh đã chọn\r\n-playVideoWithStreams(bestVideoStream, bestAudioStream);\r\n-```\r\n-\r\n-## Tích hợp vào ứng dụng WincaTube_App\r\n-\r\n-### 1. Thêm phụ thuộc vào WincaTubeExtractor\r\n-\r\n-Đảm bảo rằng ứng dụng Android của bạn đã thêm phụ thuộc vào dự án WincaTubeExtractor:\r\n-\r\n-```gradle\r\n-// build.gradle của ứng dụng\r\n-dependencies {\r\n-    implementation project(':extractor')\r\n-    // Các phụ thuộc khác...\r\n-}\r\n-```\r\n-\r\n-### 2. Khởi tạo NewPipe trong ứng dụng Android\r\n-\r\n-```java\r\n-// Trong Application.onCreate() hoặc MainActivity.onCreate()\r\n-private void initNewPipe() {\r\n-    // Khởi tạo NewPipe với Downloader của bạn\r\n-    NewPipe.init(DownloaderImpl.init(null), new Localization(\"vi\", \"VN\"));\r\n-}\r\n-```\r\n-\r\n-### 3. Tạo một lớp quản lý video\r\n-\r\n-```java\r\n-public class VideoManager {\r\n-    private final ExecutorService executorService;\r\n-    \r\n-    public VideoManager() {\r\n-        executorService = Executors.newSingleThreadExecutor();\r\n-    }\r\n-    \r\n-    public void loadVideoForPlayback(String videoUrl, VideoLoadListener listener) {\r\n-        // Chạy trong một thread riêng\r\n-        new Thread(() -> {\r\n-            try {\r\n-                // Giai đoạn 1: Tải thông tin cần thiết để phát video\r\n-                StreamInfo essentialInfo = YoutubeStreamExtractorHelper.getEssentialInfo(videoUrl);\r\n-                \r\n-                // Thông báo cho listener\r\n-                listener.onEssentialInfoLoaded(essentialInfo);\r\n-                \r\n-                // Giai đoạn 2: Tải thông tin bổ sung dưới nền\r\n-                Future<StreamInfo> futureInfo = YoutubeStreamExtractorHelper.getAdditionalInfoAsync(\r\n-                        videoUrl, executorService);\r\n-                \r\n-                // Đợi kết quả\r\n-                StreamInfo fullInfo = futureInfo.get();\r\n-                \r\n-                // Thông báo cho listener\r\n-                listener.onAdditionalInfoLoaded(fullInfo);\r\n-            } catch (Exception e) {\r\n-                // Thông báo lỗi\r\n-                listener.onError(e);\r\n-            }\r\n-        }).start();\r\n-    }\r\n-    \r\n-    public interface VideoLoadListener {\r\n-        void onEssentialInfoLoaded(StreamInfo essentialInfo);\r\n-        void onAdditionalInfoLoaded(StreamInfo fullInfo);\r\n-        void onError(Exception e);\r\n-    }\r\n-}\r\n-```\r\n-\r\n-### 4. Sử dụng VideoManager trong Activity hoặc Fragment\r\n-\r\n-```java\r\n-public class VideoPlayerActivity extends AppCompatActivity implements VideoManager.VideoLoadListener {\r\n-    private VideoManager videoManager;\r\n-    private VideoView videoView;\r\n-    private TextView titleTextView;\r\n-    private TextView descriptionTextView;\r\n-    \r\n-    @Override\r\n-    protected void onCreate(Bundle savedInstanceState) {\r\n-        super.onCreate(savedInstanceState);\r\n-        setContentView(R.layout.activity_video_player);\r\n-        \r\n-        // Khởi tạo các view\r\n-        videoView = findViewById(R.id.video_view);\r\n-        titleTextView = findViewById(R.id.text_title);\r\n-        descriptionTextView = findViewById(R.id.text_description);\r\n-        \r\n-        // Khởi tạo VideoManager\r\n-        videoManager = new VideoManager();\r\n-        \r\n-        // Lấy URL video từ intent\r\n-        String videoUrl = getIntent().getStringExtra(\"video_url\");\r\n-        \r\n-        // Tải video\r\n-        videoManager.loadVideoForPlayback(videoUrl, this);\r\n-    }\r\n-    \r\n-    @Override\r\n-    public void onEssentialInfoLoaded(StreamInfo essentialInfo) {\r\n-        // Chạy trên UI thread\r\n-        runOnUiThread(() -> {\r\n-            // Cập nhật tiêu đề\r\n-            titleTextView.setText(essentialInfo.getName());\r\n-            \r\n-            // Lấy URL phát tốt nhất\r\n-            String playbackUrl = essentialInfo.getVideoStreams().get(0).getUrl();\r\n-            \r\n-            // Bắt đầu phát video\r\n-            videoView.setVideoURI(Uri.parse(playbackUrl));\r\n-            videoView.start();\r\n-        });\r\n-    }\r\n-    \r\n-    @Override\r\n-    public void onAdditionalInfoLoaded(StreamInfo fullInfo) {\r\n-        // Chạy trên UI thread\r\n-        runOnUiThread(() -> {\r\n-            // Cập nhật mô tả\r\n-            descriptionTextView.setText(fullInfo.getDescription());\r\n-        });\r\n-    }\r\n-    \r\n-    @Override\r\n-    public void onError(Exception e) {\r\n-        // Chạy trên UI thread\r\n-        runOnUiThread(() -> {\r\n-            // Hiển thị thông báo lỗi\r\n-            Toast.makeText(this, \"Lỗi: \" + e.getMessage(), Toast.LENGTH_LONG).show();\r\n-        });\r\n-    }\r\n-}\r\n-```\r\n-\r\n-## Lưu ý\r\n-\r\n-1. Luôn gọi các phương thức trích xuất trong một thread riêng, không gọi trên UI thread.\r\n-2. Xử lý các ngoại lệ một cách thích hợp để tránh crash ứng dụng.\r\n-3. Sử dụng cơ chế cache để tránh tải lại dữ liệu khi người dùng quay lại video.\r\n-4. Kiểm tra kết nối mạng trước khi tải dữ liệu để tránh lỗi.\r\n-\r\n-## Kết luận\r\n-\r\n-Cơ chế tải 2 giai đoạn giúp cải thiện đáng kể trải nghiệm người dùng khi xem video YouTube trong ứng dụng của bạn. Bằng cách tải các thông tin cần thiết để phát video trước, người dùng có thể xem video ngay lập tức sau khi nhấp vào, đồng thời vẫn có đầy đủ thông tin bổ sung khi họ cần. \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1741940697467,
            "name": "Commit-0",
            "content": "# Hướng dẫn sử dụng cơ chế tải 2 giai đoạn\r\n\r\nTài liệu này hướng dẫn cách sử dụng cơ chế tải 2 giai đoạn trong dự án WincaTubeExtractor để cải thiện trải nghiệm người dùng khi xem video YouTube.\r\n\r\n## Giới thiệu\r\n\r\nCơ chế tải 2 giai đoạn cho phép ứng dụng tải các thông tin cần thiết để phát video ngay lập tức (URL phát, định dạng video/audio) trong giai đoạn 1, và tải các thông tin bổ sung dưới nền (mô tả, bình luận, video liên quan, v.v.) trong giai đoạn 2. Điều này giúp người dùng có thể xem video ngay lập tức sau khi nhấp vào, không phải đợi tải tất cả dữ liệu liên quan.\r\n\r\n## Các lớp chính\r\n\r\n1. `YoutubeStreamExtractorTwoPhase`: Lớp trích xuất hỗ trợ tải dữ liệu theo 2 giai đoạn.\r\n2. `YoutubeServiceTwoPhase`: Lớp dịch vụ sử dụng `YoutubeStreamExtractorTwoPhase`.\r\n3. `YoutubeStreamExtractorHelper`: Lớp tiện ích giúp ứng dụng Android sử dụng cơ chế tải 2 giai đoạn một cách dễ dàng.\r\n\r\n## Cách sử dụng trong ứng dụng Android\r\n\r\n### 1. Tải thông tin cần thiết để phát video ngay lập tức\r\n\r\n```java\r\n// Trong một AsyncTask hoặc coroutine\r\ntry {\r\n    // Lấy thông tin cần thiết để phát video\r\n    StreamInfo streamInfo = YoutubeStreamExtractorHelper.getEssentialInfo(videoUrl);\r\n    \r\n    // Lấy URL phát tốt nhất\r\n    String playbackUrl = streamInfo.getVideoStreams().get(0).getUrl();\r\n    \r\n    // Bắt đầu phát video\r\n    playVideo(playbackUrl);\r\n    \r\n    // Cập nhật UI với thông tin cơ bản\r\n    updateBasicInfo(streamInfo);\r\n} catch (Exception e) {\r\n    // Xử lý lỗi\r\n    handleError(e);\r\n}\r\n```\r\n\r\n### 2. Tải thông tin bổ sung dưới nền\r\n\r\n```java\r\n// Tạo một ExecutorService để chạy tác vụ dưới nền\r\nExecutorService executorService = Executors.newSingleThreadExecutor();\r\n\r\n// Tải thông tin bổ sung dưới nền\r\nFuture<StreamInfo> futureInfo = YoutubeStreamExtractorHelper.getAdditionalInfoAsync(\r\n        videoUrl, executorService);\r\n\r\n// Xử lý kết quả khi tải xong\r\nexecutorService.execute(() -> {\r\n    try {\r\n        // Đợi kết quả\r\n        StreamInfo fullInfo = futureInfo.get();\r\n        \r\n        // Cập nhật UI với thông tin đầy đủ\r\n        runOnUiThread(() -> {\r\n            updateFullInfo(fullInfo);\r\n        });\r\n    } catch (Exception e) {\r\n        // Xử lý lỗi\r\n        runOnUiThread(() -> {\r\n            handleAdditionalInfoError(e);\r\n        });\r\n    }\r\n});\r\n```\r\n\r\n### 3. Sử dụng trực tiếp các luồng video và âm thanh\r\n\r\n```java\r\n// Lấy danh sách các luồng video\r\nList<VideoStream> videoStreams = YoutubeStreamExtractorHelper.getEssentialVideoStreams(videoUrl);\r\n\r\n// Lấy danh sách các luồng âm thanh\r\nList<AudioStream> audioStreams = YoutubeStreamExtractorHelper.getEssentialAudioStreams(videoUrl);\r\n\r\n// Chọn luồng video và âm thanh tốt nhất\r\nVideoStream bestVideoStream = getBestVideoStream(videoStreams);\r\nAudioStream bestAudioStream = getBestAudioStream(audioStreams);\r\n\r\n// Phát video với luồng video và âm thanh đã chọn\r\nplayVideoWithStreams(bestVideoStream, bestAudioStream);\r\n```\r\n\r\n## Tích hợp vào ứng dụng WincaTube_App\r\n\r\n### 1. Thêm phụ thuộc vào WincaTubeExtractor\r\n\r\nĐảm bảo rằng ứng dụng Android của bạn đã thêm phụ thuộc vào dự án WincaTubeExtractor:\r\n\r\n```gradle\r\n// build.gradle của ứng dụng\r\ndependencies {\r\n    implementation project(':extractor')\r\n    // Các phụ thuộc khác...\r\n}\r\n```\r\n\r\n### 2. Khởi tạo NewPipe trong ứng dụng Android\r\n\r\n```java\r\n// Trong Application.onCreate() hoặc MainActivity.onCreate()\r\nprivate void initNewPipe() {\r\n    // Khởi tạo NewPipe với Downloader của bạn\r\n    NewPipe.init(DownloaderImpl.init(null), new Localization(\"vi\", \"VN\"));\r\n}\r\n```\r\n\r\n### 3. Tạo một lớp quản lý video\r\n\r\n```java\r\npublic class VideoManager {\r\n    private final ExecutorService executorService;\r\n    \r\n    public VideoManager() {\r\n        executorService = Executors.newSingleThreadExecutor();\r\n    }\r\n    \r\n    public void loadVideoForPlayback(String videoUrl, VideoLoadListener listener) {\r\n        // Chạy trong một thread riêng\r\n        new Thread(() -> {\r\n            try {\r\n                // Giai đoạn 1: Tải thông tin cần thiết để phát video\r\n                StreamInfo essentialInfo = YoutubeStreamExtractorHelper.getEssentialInfo(videoUrl);\r\n                \r\n                // Thông báo cho listener\r\n                listener.onEssentialInfoLoaded(essentialInfo);\r\n                \r\n                // Giai đoạn 2: Tải thông tin bổ sung dưới nền\r\n                Future<StreamInfo> futureInfo = YoutubeStreamExtractorHelper.getAdditionalInfoAsync(\r\n                        videoUrl, executorService);\r\n                \r\n                // Đợi kết quả\r\n                StreamInfo fullInfo = futureInfo.get();\r\n                \r\n                // Thông báo cho listener\r\n                listener.onAdditionalInfoLoaded(fullInfo);\r\n            } catch (Exception e) {\r\n                // Thông báo lỗi\r\n                listener.onError(e);\r\n            }\r\n        }).start();\r\n    }\r\n    \r\n    public interface VideoLoadListener {\r\n        void onEssentialInfoLoaded(StreamInfo essentialInfo);\r\n        void onAdditionalInfoLoaded(StreamInfo fullInfo);\r\n        void onError(Exception e);\r\n    }\r\n}\r\n```\r\n\r\n### 4. Sử dụng VideoManager trong Activity hoặc Fragment\r\n\r\n```java\r\npublic class VideoPlayerActivity extends AppCompatActivity implements VideoManager.VideoLoadListener {\r\n    private VideoManager videoManager;\r\n    private VideoView videoView;\r\n    private TextView titleTextView;\r\n    private TextView descriptionTextView;\r\n    private RecyclerView relatedVideosRecyclerView;\r\n    \r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_video_player);\r\n        \r\n        // Khởi tạo các view\r\n        videoView = findViewById(R.id.video_view);\r\n        titleTextView = findViewById(R.id.text_title);\r\n        descriptionTextView = findViewById(R.id.text_description);\r\n        relatedVideosRecyclerView = findViewById(R.id.recycler_related_videos);\r\n        \r\n        // Khởi tạo VideoManager\r\n        videoManager = new VideoManager();\r\n        \r\n        // Lấy URL video từ intent\r\n        String videoUrl = getIntent().getStringExtra(\"video_url\");\r\n        \r\n        // Tải video\r\n        videoManager.loadVideoForPlayback(videoUrl, this);\r\n    }\r\n    \r\n    @Override\r\n    public void onEssentialInfoLoaded(StreamInfo essentialInfo) {\r\n        // Chạy trên UI thread\r\n        runOnUiThread(() -> {\r\n            // Cập nhật tiêu đề\r\n            titleTextView.setText(essentialInfo.getName());\r\n            \r\n            // Lấy URL phát tốt nhất\r\n            String playbackUrl = essentialInfo.getVideoStreams().get(0).getUrl();\r\n            \r\n            // Bắt đầu phát video\r\n            videoView.setVideoURI(Uri.parse(playbackUrl));\r\n            videoView.start();\r\n        });\r\n    }\r\n    \r\n    @Override\r\n    public void onAdditionalInfoLoaded(StreamInfo fullInfo) {\r\n        // Chạy trên UI thread\r\n        runOnUiThread(() -> {\r\n            // Cập nhật mô tả\r\n            descriptionTextView.setText(fullInfo.getDescription().getContent());\r\n            \r\n            // Cập nhật danh sách video liên quan\r\n            RelatedVideosAdapter adapter = new RelatedVideosAdapter(fullInfo.getRelatedItems());\r\n            relatedVideosRecyclerView.setAdapter(adapter);\r\n        });\r\n    }\r\n    \r\n    @Override\r\n    public void onError(Exception e) {\r\n        // Chạy trên UI thread\r\n        runOnUiThread(() -> {\r\n            // Hiển thị thông báo lỗi\r\n            Toast.makeText(this, \"Lỗi: \" + e.getMessage(), Toast.LENGTH_LONG).show();\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n## Lưu ý\r\n\r\n1. Luôn gọi các phương thức trích xuất trong một thread riêng, không gọi trên UI thread.\r\n2. Xử lý các ngoại lệ một cách thích hợp để tránh crash ứng dụng.\r\n3. Sử dụng cơ chế cache để tránh tải lại dữ liệu khi người dùng quay lại video.\r\n4. Kiểm tra kết nối mạng trước khi tải dữ liệu để tránh lỗi.\r\n\r\n## Kết luận\r\n\r\nCơ chế tải 2 giai đoạn giúp cải thiện đáng kể trải nghiệm người dùng khi xem video YouTube trong ứng dụng của bạn. Bằng cách tải các thông tin cần thiết để phát video trước, người dùng có thể xem video ngay lập tức sau khi nhấp vào, đồng thời vẫn có đầy đủ thông tin bổ sung khi họ cần. "
        }
    ]
}